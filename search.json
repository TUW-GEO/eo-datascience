[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Earth Observation Datascience",
    "section": "",
    "text": "Preface\nThis is a collection of Jupyter notebooks for education at the TU Wien.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/courses/microwave-remote-sensing.html",
    "href": "chapters/courses/microwave-remote-sensing.html",
    "title": "Microwave Remote Sensing",
    "section": "",
    "text": "This course …",
    "crumbs": [
      "Microwave Remote Sensing"
    ]
  },
  {
    "objectID": "chapters/courses/microwave-remote-sensing/01_in_class_exercise.html",
    "href": "chapters/courses/microwave-remote-sensing/01_in_class_exercise.html",
    "title": "1  Discover and Read Sentinel 1 Data",
    "section": "",
    "text": "1.1 Data Discovery\nThis notebook demonstrates how to access radar data in a SpatioTemporal Asset Catalog (STAC) Catalogue using the pystac library. In this example, we use Sentinel-1 data from the EODC (earth observation data and high performance computing service provider based in Vienna) STAC catalog. In the further process, we will learn how to query a STAC catalog, select specific items, and display the metadata and the actual image.\neodc_catalog = pystac_client.Client.open(\"https://stac.eodc.eu/api/v1\")\n\neodc_catalog\n\n\n\n\n\n    \n        \n            \n                \n                    \n        \n            type\n            \"Catalog\"\n        \n    \n                \n            \n                \n                    \n        \n            id\n            \"stac-fastapi\"\n        \n    \n                \n            \n                \n                    \n        \n            stac_version\n            \"1.0.0\"\n        \n    \n                \n            \n                \n                    \n        \n            description\n            \"A STAC-compliant API to query for metadata within the EODC Data Catalogue.\"\n        \n    \n                \n            \n                \n                    \n        links[] 57 items\n        \n            \n        \n            \n                \n        \n            0\n            \n        \n            \n                \n        \n            rel\n            \"self\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            \n        \n            \n                \n        \n            rel\n            \"root\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            2\n            \n        \n            \n                \n        \n            rel\n            \"data\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            3\n            \n        \n            \n                \n        \n            rel\n            \"conformance\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/conformance\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"STAC/WFS3 conformance classes implemented by this server\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            4\n            \n        \n            \n                \n        \n            rel\n            \"search\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/search\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/geo+json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"STAC search\"\n        \n    \n            \n        \n            \n                \n        \n            method\n            \"GET\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            5\n            \n        \n            \n                \n        \n            rel\n            \"search\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/search\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/geo+json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"STAC search\"\n        \n    \n            \n        \n            \n                \n        \n            method\n            \"POST\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            6\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/SENTINEL2_L2A\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Sentinel-2 MSI Products: Level-2A data\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            7\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/SENTINEL2_GRI_L1C\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Multi-Layer Copernicus Sentinel-2 GRI in L1C\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            8\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/DOP_AUT_K_OSTTIROL\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Digital Orthophotos (DOP) Austria - Land Kärnten: Orthofotos Flugblock Osttirol\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            9\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/SENTINEL1_HPAR\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"SENTINEL1 Harmonic Parameters\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            10\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/AUT_DEM\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Austrian High Resolution DEM\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            11\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/COP_DEM\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Copernicus Digital Elevation Model (DEM)\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            12\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/DOP_AUT_K_KLAGENFURT\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Digital Orthophotos (DOP) Austria - Land Kärnten: Orthofotos Flugblock Klagenfurt\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            13\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/DOP_AUT_K_WOLFSBERG\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Digital Orthophotos (DOP) Austria - Land Kärnten: Orthofotos Flugblock Wolfsberg\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            14\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/SENTINEL1_MPLIA\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"SENTINEL1 Mean PLIA\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            15\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/SENTINEL1_SLC\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Sentinel-1 SLC\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            16\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/SENTINEL1_GRD\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Sentinel-1 SAR L1 GRD\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            17\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/AI4SAR_SIG0\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"AI4SAR Despeckled Sentinel-1 Sigma0 (20m)\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            18\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/SENTINEL3_SRAL_L2\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Sentinel-3 Products: SRAL Level-2 data\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            19\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/SENTINEL2_L1C\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Sentinel-2 MSI Products: Level-1C data\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            20\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/SENTINEL1_SIG0_20M\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"SENTINEL1 Sigma Nought (SIG0) Backscatter in 20 meter resolution\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            21\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/DOP_AUT_ST_BISCHOFSHOFEN\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Digital Orthophotos (DOP) Austria - Land Steiermark: Orthophotos Flugblock Bischofshofen\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            22\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/DOP_AUT_ST_MURTAL\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Digital Orthophotos (DOP) Austria - Land Steiermark: Orthophotos Flugblock Murtal\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            23\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/DOP_AUT_ST_MARIAZELL\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Digital Orthophotos (DOP) Austria - Land Steiermark: Orthophotos Flugblock Mariazell\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            24\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/DOP_AUT_ST_GRAZ\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Digital Orthophotos (DOP) Austria - Land Steiermark: Orthophotos Flugblock Graz\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            25\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/DOP_AUT_ST_WINDISCHGARSTEN\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Digital Orthophotos (DOP) Austria - Land Steiermark: Orthophotos Flugblock Windischgarsten\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            26\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/DOP_AUT_ST_KLAGENFURT\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Digital Orthophotos (DOP) Austria - Land Steiermark: Orthophotos Flugblock Klagenfurt\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            27\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/DOP_AUT_ST_SUEDBURGENLAND\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Digital Orthophotos (DOP) Austria - Land Steiermark: Orthophotos Flugblock Suedburgenland\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            28\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/DOP_AUT_ST_VILLACH\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Digital Orthophotos (DOP) Austria - Land Steiermark: Orthophotos Flugblock Villach\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            29\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/INTRA_FIELD_CROP_GROWTH_POTENTIAL\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Intra-field Crop Growth Potential\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            30\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/Sentinel-1_Reed_Extent\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"SENTINEL-1 Reed Extent\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            31\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/AUSTRIA_GROUND_MOTION\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Austria Ground Motion\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            32\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/ERS_ENVISAT_NRB\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"ERS-1/2 SAR and ENVISAT ASAR ARD Normalized Radar Backscatter (NRB)\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            33\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/SAR_IMP_1P\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"ERS-1/2 SAR Image Mode Precision Level-1\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            34\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/Sentinel-1_Lacken_Extent\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"SENTINEL-1 Lacken Extent\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            35\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/DROUGHT_VULNERABILITY\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Drought Vulnerability\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            36\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/SAR_IMS_1P\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"ERS-1/2 SAR Image Mode Single Look Complex Level-1\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            37\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/SENTINEL2_MFCOVER\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Monthly Composite of Fraction of Vegetation Cover\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            38\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/ASA_IMP_1P\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Envisat ASAR Image Mode Precision Level-1\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            39\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/SENTINEL2_L1C_COVERAGE\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Sentinel-2 L1C Coverage Maps\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            40\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/ASA_IMS_1P\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Envisat ASAR Image Mode Single Look Complex Level-1\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            41\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/SENTINEL1_ALPS_WETSNOW\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Sentinel-1 Alps WetSnow\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            42\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/Sentinel-2-Greenness-Austria\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Sentinel-2 Greenness Austria\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            43\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/SENTINEL1_GRD_COVERAGE\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Sentinel-1 Coverage Maps\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            44\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/VEGETATION_CHANGE_AUSTRIA\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Vegetation-Change-Austria\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            45\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/sentinel2-landsat8-l2f\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Harmonized Landsat and Sentinel 2 L2F\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            46\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/GFM\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Global Flood Monitoring\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            47\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/CORINE_LAND_COVER\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Corine Land Cover\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            48\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/DOP_AUT_K_TAMSWEG\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Digital Orthophotos (DOP) Austria - Land Kärnten: Orthofotos Flugblock Tamsweg\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            49\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/DOP_AUT_K_VILLACH\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Digital Orthophotos (DOP) Austria - Land Kärnten: Orthofotos Flugblock Villach\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            50\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/BOA_LANDSAT_8\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Bottom of Atmosphere Landsat-8 at 30m resolution.\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            51\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/DOP_AUT_K_ZELTWEG\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Digital Orthophotos (DOP) Austria - Land Kärnten: Orthofotos Flugblock Zeltweg\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            52\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/DOP_AUT_K_ZELL_AM_SEE\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Digital Orthophotos (DOP) Austria - Land Kärnten: Orthofotos Flugblock Zell am See\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            53\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/BOA_SENTINEL_2\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Bottom of Atmosphere Sentinel-2 at 10m resolution.\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            54\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/CGLS_SSM_1KM\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Copernicus Global Land Surface Soil Moisture\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            55\n            \n        \n            \n                \n        \n            rel\n            \"service-desc\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/openapi.json\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/vnd.oai.openapi+json;version=3.0\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"OpenAPI service description\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            56\n            \n        \n            \n                \n        \n            rel\n            \"service-doc\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/docs\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"text/html\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"OpenAPI service documentation\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n                \n            \n                \n                    \n        conformsTo[] 16 items\n        \n            \n        \n            \n                \n        \n            0\n            \"http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            \"https://api.stacspec.org/v1.0.0-rc.2/item-search#sort\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            2\n            \"http://www.opengis.net/spec/ogcapi-features-3/1.0/conf/features-filter\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            3\n            \"https://api.stacspec.org/v1.0.0-rc.3/item-search#fields\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            4\n            \"http://www.opengis.net/spec/cql2/1.0/conf/cql2-text\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            5\n            \"https://api.stacspec.org/v1.0.0/item-search\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            6\n            \"https://api.stacspec.org/v1.0.0-rc.2/item-search#query\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            7\n            \"https://api.stacspec.org/v1.0.0/core\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            8\n            \"http://www.opengis.net/spec/cql2/1.0/conf/basic-cql2\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            9\n            \"https://api.stacspec.org/v1.0.0-rc.2/item-search#filter\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            10\n            \"https://api.stacspec.org/v1.0.0-rc.2/item-search#context\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            11\n            \"http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            12\n            \"https://api.stacspec.org/v1.0.0/ogcapi-features\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            13\n            \"http://www.opengis.net/spec/ogcapi-features-3/1.0/conf/filter\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            14\n            \"https://api.stacspec.org/v1.0.0/collections\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            15\n            \"http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core\"\n        \n    \n            \n        \n    \n        \n    \n                \n            \n                \n                    \n        \n            title\n            \"EODC Data Catalogue\"\nThe URL https://stac.eodc.eu/api/v1, served over Hypertext Transfer Protocol (HTTP), is a STAC-compliant API endpoint (specific URL address where an API service is available) that leads to the EODC Catalogue. Besides EODC’s, other catalogues can be found on STAC Index, such as United States Geological Survey (USGS) Landsat imagery, Sentinel Hub, Copernicus Data Space Ecosystem, and so on. Briefly spoken, STAC can be used to search, discover, and access metadata of these datasets with the same code. The EODC Catalogue can be accessed on the web via this link as well.\nEach STAC catalog, composed by different providers, has many collections. To get all collections of a catalog, we can print all of them and their ids, which are used to fetch them from the catalog.\ncollections = eodc_catalog.get_collections()\n\n# length of string of collection.id, for pretty print\nmax_length = max(len(collection.id) for collection in collections)\n\nfor collection in eodc_catalog.get_collections():\n    print(f\"{collection.id.ljust(max_length)}: {collection.title}\")\n\nSENTINEL2_L2A                    : Sentinel-2 MSI Products: Level-2A data\nSENTINEL2_GRI_L1C                : Multi-Layer Copernicus Sentinel-2 GRI in L1C\nDOP_AUT_K_OSTTIROL               : Digital Orthophotos (DOP) Austria - Land Kärnten: Orthofotos Flugblock Osttirol\nSENTINEL1_HPAR                   : SENTINEL1 Harmonic Parameters\nAUT_DEM                          : Austrian High Resolution DEM\nCOP_DEM                          : Copernicus Digital Elevation Model (DEM)\nDOP_AUT_K_KLAGENFURT             : Digital Orthophotos (DOP) Austria - Land Kärnten: Orthofotos Flugblock Klagenfurt\nDOP_AUT_K_WOLFSBERG              : Digital Orthophotos (DOP) Austria - Land Kärnten: Orthofotos Flugblock Wolfsberg\nSENTINEL1_MPLIA                  : SENTINEL1 Mean PLIA\nSENTINEL1_SLC                    : Sentinel-1 SLC\nSENTINEL1_GRD                    : Sentinel-1 SAR L1 GRD\nAI4SAR_SIG0                      : AI4SAR Despeckled Sentinel-1 Sigma0 (20m)\nSENTINEL3_SRAL_L2                : Sentinel-3 Products: SRAL Level-2 data\nSENTINEL2_L1C                    : Sentinel-2 MSI Products: Level-1C data\nSENTINEL1_SIG0_20M               : SENTINEL1 Sigma Nought (SIG0) Backscatter in 20 meter resolution\nDOP_AUT_ST_BISCHOFSHOFEN         : Digital Orthophotos (DOP) Austria - Land Steiermark: Orthophotos Flugblock Bischofshofen\nDOP_AUT_ST_MURTAL                : Digital Orthophotos (DOP) Austria - Land Steiermark: Orthophotos Flugblock Murtal\nDOP_AUT_ST_MARIAZELL             : Digital Orthophotos (DOP) Austria - Land Steiermark: Orthophotos Flugblock Mariazell\nDOP_AUT_ST_GRAZ                  : Digital Orthophotos (DOP) Austria - Land Steiermark: Orthophotos Flugblock Graz\nDOP_AUT_ST_WINDISCHGARSTEN       : Digital Orthophotos (DOP) Austria - Land Steiermark: Orthophotos Flugblock Windischgarsten\nDOP_AUT_ST_KLAGENFURT            : Digital Orthophotos (DOP) Austria - Land Steiermark: Orthophotos Flugblock Klagenfurt\nDOP_AUT_ST_SUEDBURGENLAND        : Digital Orthophotos (DOP) Austria - Land Steiermark: Orthophotos Flugblock Suedburgenland\nDOP_AUT_ST_VILLACH               : Digital Orthophotos (DOP) Austria - Land Steiermark: Orthophotos Flugblock Villach\nINTRA_FIELD_CROP_GROWTH_POTENTIAL: Intra-field Crop Growth Potential\nSentinel-1_Reed_Extent           : SENTINEL-1 Reed Extent\nAUSTRIA_GROUND_MOTION            : Austria Ground Motion\nERS_ENVISAT_NRB                  : ERS-1/2 SAR and ENVISAT ASAR ARD Normalized Radar Backscatter (NRB)\nSAR_IMP_1P                       : ERS-1/2 SAR Image Mode Precision Level-1\nSentinel-1_Lacken_Extent         : SENTINEL-1 Lacken Extent\nDROUGHT_VULNERABILITY            : Drought Vulnerability\nSAR_IMS_1P                       : ERS-1/2 SAR Image Mode Single Look Complex Level-1\nSENTINEL2_MFCOVER                : Monthly Composite of Fraction of Vegetation Cover\nASA_IMP_1P                       : Envisat ASAR Image Mode Precision Level-1\nSENTINEL2_L1C_COVERAGE           : Sentinel-2 L1C Coverage Maps\nASA_IMS_1P                       : Envisat ASAR Image Mode Single Look Complex Level-1\nSENTINEL1_ALPS_WETSNOW           : Sentinel-1 Alps WetSnow\nSentinel-2-Greenness-Austria     : Sentinel-2 Greenness Austria\nSENTINEL1_GRD_COVERAGE           : Sentinel-1 Coverage Maps\nVEGETATION_CHANGE_AUSTRIA        : Vegetation-Change-Austria\nsentinel2-landsat8-l2f           : Harmonized Landsat and Sentinel 2 L2F\nGFM                              : Global Flood Monitoring\nCORINE_LAND_COVER                : Corine Land Cover\nDOP_AUT_K_TAMSWEG                : Digital Orthophotos (DOP) Austria - Land Kärnten: Orthofotos Flugblock Tamsweg\nDOP_AUT_K_VILLACH                : Digital Orthophotos (DOP) Austria - Land Kärnten: Orthofotos Flugblock Villach\nBOA_LANDSAT_8                    : Bottom of Atmosphere Landsat-8 at 30m resolution.\nDOP_AUT_K_ZELTWEG                : Digital Orthophotos (DOP) Austria - Land Kärnten: Orthofotos Flugblock Zeltweg\nDOP_AUT_K_ZELL_AM_SEE            : Digital Orthophotos (DOP) Austria - Land Kärnten: Orthofotos Flugblock Zell am See\nBOA_SENTINEL_2                   : Bottom of Atmosphere Sentinel-2 at 10m resolution.\nCGLS_SSM_1KM                     : Copernicus Global Land Surface Soil Moisture\nTo get a specific collection from the catalog, we can use the client.get_collection() method and provide the collection name. We can then display its description, id, temporal and spatial extent, license, etc. In this notebook, we will work with the Sentinel-1 sigma naught 20m collection.\ncolllection_id = \"SENTINEL1_SIG0_20M\"\n\ncollection = eodc_catalog.get_collection(colllection_id)\ncollection\n\n\n\n\n\n    \n        \n            \n                \n                    \n        \n            type\n            \"Collection\"\n        \n    \n                \n            \n                \n                    \n        \n            id\n            \"SENTINEL1_SIG0_20M\"\n        \n    \n                \n            \n                \n                    \n        \n            stac_version\n            \"1.0.0\"\n        \n    \n                \n            \n                \n                    \n        \n            description\n            \"Sentinel-1 Sigma Nought (SIG0) Products are radiometric calibrated and georeferenced backscatter data generated from Sentinel-1 level-1 Interferometric Wide (IW) Swath Ground Range Detected (GRD) High resolution products using TUWien Sentinel-1 preprocesssing workflow. The preprocessing workflow includes following steps: applying precise orbit file, radiometric calibration, thermal noise removal, and range doppler terrain correction. In the end, Sigma0 backscatter image is reprojected and resampled into Equi7 Grid system at 20m pixels spacing.\"\n        \n    \n                \n            \n                \n                    \n        links[] 5 items\n        \n            \n        \n            \n                \n        \n            0\n            \n        \n            \n                \n        \n            rel\n            \"items\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/SENTINEL1_SIG0_20M/items\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/geo+json\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            \n        \n            \n                \n        \n            rel\n            \"parent\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            2\n            \n        \n            \n                \n        \n            rel\n            \"root\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"EODC Data Catalogue\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            3\n            \n        \n            \n                \n        \n            rel\n            \"self\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/api/v1/collections/SENTINEL1_SIG0_20M\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            4\n            \n        \n            \n                \n        \n            rel\n            \"items\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.eodc.eu/ingestion/v1/collections/SENTINEL1_SIG0_20M/items\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/geo+json\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n                \n            \n                \n                    \n        stac_extensions[] 6 items\n        \n            \n        \n            \n                \n        \n            0\n            \"https://stac-extensions.github.io/sat/v1.0.0/schema.json\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            \"https://stac-extensions.github.io/sar/v1.0.0/schema.json\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            2\n            \"https://stac-extensions.github.io/eo/v1.0.0/schema.json\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            3\n            \"https://stac-extensions.github.io/projection/v1.1.0/schema.json\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            4\n            \"https://stac-extensions.github.io/item-assets/v1.0.0/schema.json\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            5\n            \"https://stac-extensions.github.io/datacube/v2.0.0/schema.json\"\n        \n    \n            \n        \n    \n        \n    \n                \n            \n                \n                    \n        \n            cube:dimensions\n            \n        \n            \n                \n        \n            x\n            \n        \n            \n                \n        \n            axis\n            \"x\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"spatial\"\n        \n    \n            \n        \n            \n                \n        extent[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -180\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            180\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            y\n            \n        \n            \n                \n        \n            axis\n            \"y\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"spatial\"\n        \n    \n            \n        \n            \n                \n        extent[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -90\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            90\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            time\n            \n        \n            \n                \n        \n            type\n            \"temporal\"\n        \n    \n            \n        \n            \n                \n        extent[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            \"2014-10-01T00:00:00Z\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            None\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n                \n            \n                \n                    \n        \n            title\n            \"SENTINEL1 Sigma Nought (SIG0) Backscatter in 20 meter resolution\"\n        \n    \n                \n            \n                \n                    \n        \n            extent\n            \n        \n            \n                \n        \n            spatial\n            \n        \n            \n                \n        bbox[] 1 items\n        \n            \n        \n            \n                \n        0[] 4 items\n        \n            \n        \n            \n                \n        \n            0\n            -180\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            -90\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            2\n            180\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            3\n            90\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            temporal\n            \n        \n            \n                \n        interval[] 1 items\n        \n            \n        \n            \n                \n        0[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            \"2014-10-01T00:00:00Z\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            None\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n                \n            \n                \n                    \n        \n            license\n            \"proprietary\"\n        \n    \n                \n            \n                \n                    \n        providers[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            \n        \n            \n                \n        \n            name\n            \"TU Wien\"\n        \n    \n            \n        \n            \n                \n        roles[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            \"processor\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            \"licensor\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            url\n            \"https://www.tuwien.at/mg/geo\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            \n        \n            \n                \n        \n            name\n            \"EODC\"\n        \n    \n            \n        \n            \n                \n        roles[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            \"processor\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            \"host\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            url\n            \"https://eodc.eu/\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n                \n            \n                \n                    \n        \n            summaries\n            \n        \n            \n                \n        gsd[] 1 items\n        \n            \n        \n            \n                \n        \n            0\n            20\n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        eo:bands[] 4 items\n        \n            \n        \n            \n                \n        \n            0\n            \n        \n            \n                \n        \n            name\n            \"VV\"\n        \n    \n            \n        \n            \n                \n        \n            common_name\n            \"Sigma0_VV\"\n        \n    \n            \n        \n            \n                \n        \n            description\n            \"Sigma Nought in VV polarization\"\n        \n    \n            \n        \n            \n                \n        \n            center_wavelength\n            55465.76\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            \n        \n            \n                \n        \n            name\n            \"VH\"\n        \n    \n            \n        \n            \n                \n        \n            common_name\n            \"Sigma0_VH\"\n        \n    \n            \n        \n            \n                \n        \n            description\n            \"Sigma Nought in VH polarization\"\n        \n    \n            \n        \n            \n                \n        \n            center_wavelength\n            55465.76\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            2\n            \n        \n            \n                \n        \n            name\n            \"HH\"\n        \n    \n            \n        \n            \n                \n        \n            common_name\n            \"Sigma0_HH\"\n        \n    \n            \n        \n            \n                \n        \n            description\n            \"Sigma Nought in HH polarization\"\n        \n    \n            \n        \n            \n                \n        \n            center_wavelength\n            55465.76\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            3\n            \n        \n            \n                \n        \n            name\n            \"HV\"\n        \n    \n            \n        \n            \n                \n        \n            common_name\n            \"Sigma0_HV\"\n        \n    \n            \n        \n            \n                \n        \n            description\n            \"Sigma Nought in HV polarization\"\n        \n    \n            \n        \n            \n                \n        \n            center_wavelength\n            55465.76\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        platform[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            \"sentinel-1a\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            \"sentinel-1b\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            item_assets\n            \n        \n            \n                \n        \n            HH\n            \n        \n            \n                \n        \n            type\n            \"image/tiff; application=geotiff\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Sigma Nought (HH)\"\n        \n    \n            \n        \n            \n                \n        eo:bands[] 1 items\n        \n            \n        \n            \n                \n        \n            0\n            \n        \n            \n                \n        \n            name\n            \"HH\"\n        \n    \n            \n        \n            \n                \n        \n            common_name\n            \"Sigma0_HH\"\n        \n    \n            \n        \n            \n                \n        \n            center_wavelength\n            55465.76\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            description\n            \"Sigma Nought in HH polarization\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            HV\n            \n        \n            \n                \n        \n            type\n            \"image/tiff; application=geotiff\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Sigma Nought (HV)\"\n        \n    \n            \n        \n            \n                \n        eo:bands[] 1 items\n        \n            \n        \n            \n                \n        \n            0\n            \n        \n            \n                \n        \n            name\n            \"HV\"\n        \n    \n            \n        \n            \n                \n        \n            common_name\n            \"Sigma0_HV\"\n        \n    \n            \n        \n            \n                \n        \n            center_wavelength\n            55465.76\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            description\n            \"Sigma Nought in HV polarization\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            VH\n            \n        \n            \n                \n        \n            type\n            \"image/tiff; application=geotiff\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Sigma Nought (VH)\"\n        \n    \n            \n        \n            \n                \n        eo:bands[] 1 items\n        \n            \n        \n            \n                \n        \n            0\n            \n        \n            \n                \n        \n            name\n            \"VH\"\n        \n    \n            \n        \n            \n                \n        \n            common_name\n            \"Sigma0_VH\"\n        \n    \n            \n        \n            \n                \n        \n            center_wavelength\n            55465.76\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            description\n            \"Sigma Nought in VH polarization\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            VV\n            \n        \n            \n                \n        \n            type\n            \"image/tiff; application=geotiff\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Sigma Nought (VV)\"\n        \n    \n            \n        \n            \n                \n        eo:bands[] 1 items\n        \n            \n        \n            \n                \n        \n            0\n            \n        \n            \n                \n        \n            name\n            \"VV\"\n        \n    \n            \n        \n            \n                \n        \n            common_name\n            \"Sigma0_VV\"\n        \n    \n            \n        \n            \n                \n        \n            center_wavelength\n            55465.76\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            description\n            \"Sigma Nought in VV polarization\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            thumbnail\n            \n        \n            \n                \n        \n            type\n            \"image/png\"\n        \n    \n            \n        \n            \n                \n        roles[] 1 items\n        \n            \n        \n            \n                \n        \n            0\n            \"thumbnail\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Thumbnail\"\n        \n    \n            \n        \n            \n                \n        \n            description\n            \"A medium sized thumbnail\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            constellation\n            \"sentinel-1\"\n        \n    \n            \n        \n    \n        \n    \n                \n            \n                \n                    \n        \n            assets\n            \n        \n            \n                \n        \n            thumbnail\n            \n        \n            \n                \n        \n            href\n            \"https://objectstore.eodc.eu:2222/swift/v1/AUTH_68e13833a1624f43ba2cac01376a18af/thumbnails/SENTINEL1_SIG0_20M.png\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"image/png\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"SENTINEL1_SIG0_20M collection thumbnail.\"\n        \n    \n            \n        \n            \n                \n        roles[] 1 items\n        \n            \n        \n            \n                \n        \n            0\n            \"thumbnail\"\nEach collection has multiple items. An item is one spatio-temporal instance the collection, for instance a satellite image. If items are needed for a specific timeframe or for a specific region of interest, we can define this as a query.\ntime_range = \"2022-10-01/2022-10-07\"  # a closed range\n# time_range = \"2022-01\"  # whole month, same can be done for a year and a day\n# time_range = \"2022-01-01/..\"  # up to the current date, an open range\n# time_range = \"2022-01-01T05:34:46\"  # a specific time instance\nA spatial region of interest can be defined in different ways. One option is to define a simple bounding box:\nlatmin, latmax = 46.3, 49.3  # South to North\nlonmin, lonmax = 13.8, 17.8  # West to East\n\nbounding_box = [lonmin, latmin, lonmax, latmax]\nIf the region of interest is not rectengular, we can also define a polygon:\n# GEOJSON can be created on geojson.io\n\n# This specific area of interest is a rectangle, but since it is\n# a closed polygon it seems like it has five nodes\n\narea_of_interest = {\n    \"coordinates\": [\n        [\n            [17.710928010825853, 49.257630084442496],\n            [13.881798300915221, 49.257630084442496],\n            [13.881798300915221, 46.34747715326259],\n            [17.710928010825853, 46.34747715326259],\n            [17.710928010825853, 49.257630084442496],\n        ]\n    ],\n    \"type\": \"Polygon\",\n}\nUsing our previously loaded STAC catalog, we can now search for items fullfilling our query. In this example we are using the bounding box. If we want to use an area of interest specified in the geojson format - one hast to use the intersects parameter as documented in the comment below.\nsearch = eodc_catalog.search(\n    collections=colllection_id,  # can also be a list of several collections\n    bbox=bounding_box,  # search by bounding box\n    # intersects=area_of_interest,  # GeoJSON search\n    datetime=time_range,\n    # max_items=1  # number of max items to load\n)\n\n# If we comment everything besides colllection_id, we will load whole\n# collection for available region and time_range\n\nitems_eodc = search.item_collection()\nprint(f\"On EODC we found {len(items_eodc)} items for the given search query\")\n\nOn EODC we found 52 items for the given search query\nNow, we can fetch a single item, in this case a Sentinel-1 image, from the query results. A good practice is to always check what metadata the data provider has stored on the item level. This can be done by looking into the item properties.\nitem = items_eodc[0]\nitem.properties\n\n{'gsd': 20,\n 'parent': 'S1A_IW_GRDH_1SDV_20221007T170811_20221007T170836_045339_056BBA_D830.zip',\n 'checksum': '576abe68a715e5ee177d8b640871e873',\n 'datetime': '2022-10-07T17:08:11Z',\n 'blocksize': {'x': 15000, 'y': 5},\n 'proj:bbox': [4800000, 1500000, 5100000, 1800000],\n 'proj:wkt2': 'PROJCS[\"Azimuthal_Equidistant\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Azimuthal_Equidistant\"],PARAMETER[\"latitude_of_center\",53],PARAMETER[\"longitude_of_center\",24],PARAMETER[\"false_easting\",5837287.81977],PARAMETER[\"false_northing\",2121415.69617],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]]]',\n 'proj:shape': [15000, 15000],\n 'Equi7_TileID': 'EU020M_E048N015T3',\n 'constellation': 'sentinel-1',\n 'proj:geometry': {'type': 'Polygon',\n  'coordinates': [[[4800000.0, 1500000.0],\n    [4800000.0, 1800000.0],\n    [5100000.0, 1800000.0],\n    [5100000.0, 1500000.0],\n    [4800000.0, 1500000.0]]]},\n 'proj:transform': [20, 0, 4800000, 0, -20, 1800000],\n 'sat:orbit_state': 'ascending',\n 'sar:product_type': 'GRD',\n 'slice_gap_filled': False,\n 'sar:polarizations': ['VH', 'VV'],\n 'sar:frequency_band': 'C',\n 'sat:relative_orbit': 117,\n 'sar:instrument_mode': 'IW',\n 'border_noise_removed': True,\n 'sar:center_frequency': 5.405,\n 'sar:resolution_range': 40,\n 'thermal_noise_removed': True,\n 'sar:resolution_azimuth': 40,\n 'sar:pixel_spacing_range': 20,\n 'sar:observation_direction': 'right',\n 'sar:pixel_spacing_azimuth': 20,\n 'sat:platform_international_designator': '2014-016A'}\nFor now, let’s display only the vertical-vertical (VV) polarized band of the item and some information about the data.\nitem.assets[\"VV\"].extra_fields.get(\"raster:bands\")[0]\n\n{'scale': 10,\n 'nodata': -9999,\n 'offset': 0,\n 'data_type': 'int16',\n 'spatial_resolution': 20}\nIn the EODC STAC catalogue an item can conveniently be displayed using its thumbnail.\nitem.assets[\"thumbnail\"].href\n\n'https://data.eodc.eu/collections/SENTINEL1_SIG0_20M/V1M1R1/EQUI7_EU020M/E048N015T3/SIG0_20221007T170811__VV_A117_E048N015T3_EU020M_V1M1R1_S1AIWGRDH_TUWIEN.tif/thumbnail'\nNow we will plot the data on a map using the thumbnail and the python package folium. This is an easy way to quickly check how the data found by a search query looks on a map.\nmap = folium.Map(\n    location=[(latmin + latmax) / 2, (lonmin + lonmax) / 2],\n    zoom_start=7,\n    zoom_control=False,\n    scrollWheelZoom=False,\n    dragging=False,\n)\n\nfolium.GeoJson(area_of_interest, name=\"Area of Interest\").add_to(map)\n\nfor item in items_eodc:\n    # url leading to display of an item, can also be used as hyperlink\n    image_url = item.assets[\"thumbnail\"].href\n    bounds = item.bbox\n    folium.raster_layers.ImageOverlay(\n        image=image_url,\n        bounds=[[bounds[1], bounds[0]], [bounds[3], bounds[2]]],\n    ).add_to(map)\n\nfolium.LayerControl().add_to(map)\n\nmap\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\nFigure 1: Map of study area. Blue rectangle is the area covered by the discovered data.",
    "crumbs": [
      "Microwave Remote Sensing",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Discover and Read Sentinel 1 Data</span>"
    ]
  },
  {
    "objectID": "chapters/courses/microwave-remote-sensing/01_in_class_exercise.html#data-reading",
    "href": "chapters/courses/microwave-remote-sensing/01_in_class_exercise.html#data-reading",
    "title": "1  Discover and Read Sentinel 1 Data",
    "section": "1.2 Data Reading",
    "text": "1.2 Data Reading\nSTAC can also be a useful tool for the discovery of data, however it only loads metadata. This saves memory, but if one would like to do further analysis, the data has to be loaded into memory or downloaded on disk.\nIn the following, we will demonstrate this with the library odc-stac. Here we can define what data will loaded as bands; in this case VV sigma naught. Moreover we can resample the data by providing any coordinate reference system (CRS) and resolution as well as a method for resampling of continuos data (e.g. bilinear resampling). In the example below we use the EQUI7 Grid of Europe and a 20 meter sampling. This is the native format of sigma naught stored at EODC, so there will be no actual resampling. Note, also, that resampling is not advisable for this data, as it is provided on a logarithmic scale. More about this in notebook 2.\nThe chunks argument is an advancement method for performing parallel computations on the data. We will not cover this in further detail.\n\nbands = \"VV\"  # Vertical-vertical polarized\ncrs = \"EPSG:27704\"  # Coordinate Reference System: EQUI7 Grid of Europe\nres = 20  # 20 meter\nchunks = {\"time\": 1, \"latitude\": 1000, \"longitude\": 1000}\nsig0_dc = odc_stac.load(\n    items_eodc,\n    bands=bands,\n    crs=crs,\n    resolution=res,\n    bbox=bounding_box,\n    chunks=chunks,\n    resampling=\"bilinear\",\n)\n\nLet’s have a look at the VV polarized band of the dataset.\n\nsig0_dc.VV\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'VV' (time: 31, y: 18269, x: 16725)&gt; Size: 19GB\ndask.array&lt;VV, shape=(31, 18269, 16725), dtype=int16, chunksize=(1, 18269, 16725), chunktype=numpy.ndarray&gt;\nCoordinates:\n  * y            (y) float64 146kB 1.762e+06 1.762e+06 ... 1.396e+06 1.396e+06\n  * x            (x) float64 134kB 5.052e+06 5.052e+06 ... 5.387e+06 5.387e+06\n    spatial_ref  int32 4B 27704\n  * time         (time) datetime64[ns] 248B 2022-10-01T05:09:56 ... 2022-10-0...\nAttributes:\n    nodata:   -9999xarray.DataArray'VV'time: 31y: 18269x: 16725dask.array&lt;chunksize=(1, 18269, 16725), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n17.64 GiB\n582.79 MiB\n\n\nShape\n(31, 18269, 16725)\n(1, 18269, 16725)\n\n\nDask graph\n31 chunks in 3 graph layers\n\n\nData type\nint16 numpy.ndarray\n\n\n\n\n                                                             16725 18269 31\n\n\n\n\nCoordinates: (4)y(y)float641.762e+06 1.762e+06 ... 1.396e+06units :metreresolution :-20.0crs :EPSG:27704array([1761670., 1761650., 1761630., ..., 1396350., 1396330., 1396310.])x(x)float645.052e+06 5.052e+06 ... 5.387e+06units :metreresolution :20.0crs :EPSG:27704array([5052090., 5052110., 5052130., ..., 5386530., 5386550., 5386570.])spatial_ref()int3227704spatial_ref :PROJCRS[\"WGS 84 / Equi7 Europe\",BASEGEOGCRS[\"WGS 84\",ENSEMBLE[\"World Geodetic System 1984 ensemble\",MEMBER[\"World Geodetic System 1984 (Transit)\"],MEMBER[\"World Geodetic System 1984 (G730)\"],MEMBER[\"World Geodetic System 1984 (G873)\"],MEMBER[\"World Geodetic System 1984 (G1150)\"],MEMBER[\"World Geodetic System 1984 (G1674)\"],MEMBER[\"World Geodetic System 1984 (G1762)\"],MEMBER[\"World Geodetic System 1984 (G2139)\"],MEMBER[\"World Geodetic System 1984 (G2296)\"],ELLIPSOID[\"WGS 84\",6378137,298.257223563,LENGTHUNIT[\"metre\",1]],ENSEMBLEACCURACY[2.0]],PRIMEM[\"Greenwich\",0,ANGLEUNIT[\"degree\",0.0174532925199433]],ID[\"EPSG\",4326]],CONVERSION[\"Equi7 projection - Europe\",METHOD[\"Azimuthal Equidistant\",ID[\"EPSG\",1125]],PARAMETER[\"Latitude of natural origin\",53,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8801]],PARAMETER[\"Longitude of natural origin\",24,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8802]],PARAMETER[\"False easting\",5837287.82,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8806]],PARAMETER[\"False northing\",2121415.696,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8807]]],CS[Cartesian,2],AXIS[\"(E)\",east,ORDER[1],LENGTHUNIT[\"metre\",1]],AXIS[\"(N)\",north,ORDER[2],LENGTHUNIT[\"metre\",1]],USAGE[SCOPE[\"Continental mapping of raster data.\"],AREA[\"Europe including Russia west of the Ural Mountains.\"],BBOX[29.24,-42.52,83.67,51.73]],ID[\"EPSG\",27704]]crs_wkt :PROJCRS[\"WGS 84 / Equi7 Europe\",BASEGEOGCRS[\"WGS 84\",ENSEMBLE[\"World Geodetic System 1984 ensemble\",MEMBER[\"World Geodetic System 1984 (Transit)\"],MEMBER[\"World Geodetic System 1984 (G730)\"],MEMBER[\"World Geodetic System 1984 (G873)\"],MEMBER[\"World Geodetic System 1984 (G1150)\"],MEMBER[\"World Geodetic System 1984 (G1674)\"],MEMBER[\"World Geodetic System 1984 (G1762)\"],MEMBER[\"World Geodetic System 1984 (G2139)\"],MEMBER[\"World Geodetic System 1984 (G2296)\"],ELLIPSOID[\"WGS 84\",6378137,298.257223563,LENGTHUNIT[\"metre\",1]],ENSEMBLEACCURACY[2.0]],PRIMEM[\"Greenwich\",0,ANGLEUNIT[\"degree\",0.0174532925199433]],ID[\"EPSG\",4326]],CONVERSION[\"Equi7 projection - Europe\",METHOD[\"Azimuthal Equidistant\",ID[\"EPSG\",1125]],PARAMETER[\"Latitude of natural origin\",53,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8801]],PARAMETER[\"Longitude of natural origin\",24,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8802]],PARAMETER[\"False easting\",5837287.82,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8806]],PARAMETER[\"False northing\",2121415.696,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8807]]],CS[Cartesian,2],AXIS[\"(E)\",east,ORDER[1],LENGTHUNIT[\"metre\",1]],AXIS[\"(N)\",north,ORDER[2],LENGTHUNIT[\"metre\",1]],USAGE[SCOPE[\"Continental mapping of raster data.\"],AREA[\"Europe including Russia west of the Ural Mountains.\"],BBOX[29.24,-42.52,83.67,51.73]],ID[\"EPSG\",27704]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984 ensembleprojected_crs_name :WGS 84 / Equi7 Europegrid_mapping_name :azimuthal_equidistantlatitude_of_projection_origin :53.0longitude_of_projection_origin :24.0false_easting :5837287.82false_northing :2121415.696GeoTransform :5052080 20 0 1761680 0 -20array(27704, dtype=int32)time(time)datetime64[ns]2022-10-01T05:09:56 ... 2022-10-...array(['2022-10-01T05:09:56.000000000', '2022-10-01T05:10:21.000000000',\n       '2022-10-01T05:10:46.000000000', '2022-10-01T05:11:11.000000000',\n       '2022-10-01T05:11:36.000000000', '2022-10-02T16:58:39.000000000',\n       '2022-10-02T16:59:04.000000000', '2022-10-02T16:59:29.000000000',\n       '2022-10-02T16:59:54.000000000', '2022-10-03T04:53:37.000000000',\n       '2022-10-03T04:54:02.000000000', '2022-10-03T04:54:27.000000000',\n       '2022-10-03T04:54:52.000000000', '2022-10-03T18:02:55.000000000',\n       '2022-10-04T05:34:54.000000000', '2022-10-04T05:35:19.000000000',\n       '2022-10-04T16:42:01.000000000', '2022-10-04T16:42:26.000000000',\n       '2022-10-04T16:42:51.000000000', '2022-10-04T16:43:16.000000000',\n       '2022-10-04T16:43:41.000000000', '2022-10-06T05:18:07.000000000',\n       '2022-10-06T05:18:32.000000000', '2022-10-06T05:18:57.000000000',\n       '2022-10-06T05:19:22.000000000', '2022-10-06T05:19:47.000000000',\n       '2022-10-07T17:06:31.000000000', '2022-10-07T17:06:56.000000000',\n       '2022-10-07T17:07:21.000000000', '2022-10-07T17:07:46.000000000',\n       '2022-10-07T17:08:11.000000000'], dtype='datetime64[ns]')Indexes: (3)yPandasIndexPandasIndex(Index([1761670.0, 1761650.0, 1761630.0, 1761610.0, 1761590.0, 1761570.0,\n       1761550.0, 1761530.0, 1761510.0, 1761490.0,\n       ...\n       1396490.0, 1396470.0, 1396450.0, 1396430.0, 1396410.0, 1396390.0,\n       1396370.0, 1396350.0, 1396330.0, 1396310.0],\n      dtype='float64', name='y', length=18269))xPandasIndexPandasIndex(Index([5052090.0, 5052110.0, 5052130.0, 5052150.0, 5052170.0, 5052190.0,\n       5052210.0, 5052230.0, 5052250.0, 5052270.0,\n       ...\n       5386390.0, 5386410.0, 5386430.0, 5386450.0, 5386470.0, 5386490.0,\n       5386510.0, 5386530.0, 5386550.0, 5386570.0],\n      dtype='float64', name='x', length=16725))timePandasIndexPandasIndex(DatetimeIndex(['2022-10-01 05:09:56', '2022-10-01 05:10:21',\n               '2022-10-01 05:10:46', '2022-10-01 05:11:11',\n               '2022-10-01 05:11:36', '2022-10-02 16:58:39',\n               '2022-10-02 16:59:04', '2022-10-02 16:59:29',\n               '2022-10-02 16:59:54', '2022-10-03 04:53:37',\n               '2022-10-03 04:54:02', '2022-10-03 04:54:27',\n               '2022-10-03 04:54:52', '2022-10-03 18:02:55',\n               '2022-10-04 05:34:54', '2022-10-04 05:35:19',\n               '2022-10-04 16:42:01', '2022-10-04 16:42:26',\n               '2022-10-04 16:42:51', '2022-10-04 16:43:16',\n               '2022-10-04 16:43:41', '2022-10-06 05:18:07',\n               '2022-10-06 05:18:32', '2022-10-06 05:18:57',\n               '2022-10-06 05:19:22', '2022-10-06 05:19:47',\n               '2022-10-07 17:06:31', '2022-10-07 17:06:56',\n               '2022-10-07 17:07:21', '2022-10-07 17:07:46',\n               '2022-10-07 17:08:11'],\n              dtype='datetime64[ns]', name='time', freq=None))Attributes: (1)nodata :-9999\n\n\nAs we can see, the data is stored as a xarray DataArray. Xarray is a convenient package for multidimensional labeled arrays, like temperature, humidity, pressure, different bands of satellite imagery, and so on. The link provides detailed documentation. In a later notebook we will explore some more of the functionality of xarray. As we can see in the coordinates, the data here consists of 21 time steps.\nIn general, data from STAC is “lazily” loaded, which means that the structure of the DataArray is constructed, but the data is not loaded yet. It is loaded only at instance when it is needed, for example, for plotting, computations, and so on.\nSince the DataArray has currently a size of almost 18 GiB, we will subset it to the region of Vienna.\n\n# Create a bounding box covering the region of Vienna\nlatmin_smaller, latmax_smaller = 48, 48.4\nlonmin_smaller, lonmax_smaller = 16, 16.5\n\nsmaller_bounding_box = [\n    [latmin_smaller, lonmin_smaller],\n    [latmax_smaller, lonmax_smaller],\n]\n\nmap = folium.Map(\n    location=[\n        (latmin_smaller + latmax_smaller) / 2,\n        (lonmin_smaller + lonmax_smaller) / 2,\n    ],\n    zoom_start=8,\n    zoom_control=False,\n    scrollWheelZoom=False,\n    dragging=False,\n)\n\nfolium.GeoJson(area_of_interest, name=\"Area of Interest\").add_to(map)\n\nfolium.Rectangle(\n    bounds=smaller_bounding_box,\n    color=\"red\",\n).add_to(map)\n\nfor item in items_eodc:\n    image_url = item.assets[\"thumbnail\"].href\n    bounds = item.bbox\n    folium.raster_layers.ImageOverlay(\n        image=image_url,\n        bounds=[[bounds[1], bounds[0]], [bounds[3], bounds[2]]],\n    ).add_to(map)\n\nfolium.LayerControl().add_to(map)\n\nmap\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nFigure 2: Map of study area. Blue rectangle is the area covered by the discovered data. Red rectangle covers the selected data.\nCreate a new dataset with the smaller bounding box covering the region of Vienna. We will leave out the arguments for resampling and directly use the native format as defined in the metadata.\n\nsig0_dc = odc_stac.load(\n    items_eodc,\n    bands=bands,\n    bbox=[lonmin_smaller, latmin_smaller, lonmax_smaller, latmax_smaller],\n    chunks=chunks,\n)\n\nDue to the way the data is acquired and stored, some items include “no data” areas. In our case, no data has the value -9999, but this can vary from data provider to data provider. This information can usually be found in the metadata. Furthermore, to save memory, data is often stored as integer (e.g. 25) and not in float (e.g. 2.5) format. For this reason, the backscatter values are often multiplied by a scale factor, in this case factor 10.\nAs Sentinel-1 satellites overpasses Austria every few days, only some time steps of the dataset will have physical data. As a final step, we will now decode the data and create a plot of two consecutive Sentinel-1 acquisitions of Vienna.\n\n# Retrieve the scale factor and NoData value from the metadata. raster:bands is\n# a STAC raster extension\nscale = item.assets[\"VV\"].extra_fields.get(\"raster:bands\")[0][\"scale\"]\nnodata = item.assets[\"VV\"].extra_fields.get(\"raster:bands\")[0][\"nodata\"]\n\n# Decode data with the NoData value and the scale factor\nsig0_dc = sig0_dc.where(sig0_dc != nodata) / scale\n\n# We should remove unnecessary dates when there was no data\n# (no satellite overpass)\nsig0_dc = sig0_dc.dropna(dim=\"time\")\n\n\nsig0_dc.VV.plot(col=\"time\", robust=True, cmap=\"Greys_r\", aspect=1, size=10)\n\n\n\n\n\n\n\n\nFigure 3: Sentinel-1 microwave backscatter image for two timeslices.",
    "crumbs": [
      "Microwave Remote Sensing",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Discover and Read Sentinel 1 Data</span>"
    ]
  },
  {
    "objectID": "chapters/courses/microwave-remote-sensing/02_in_class_exercise.html",
    "href": "chapters/courses/microwave-remote-sensing/02_in_class_exercise.html",
    "title": "2  Unit Conversion",
    "section": "",
    "text": "2.1 Exploring the Data\nIn this notebook, we are going to have a look at the conversion of units. Sentinel-1 data, and most other SAR data, is usually provided in decibels (dB). In this notebook, we will discover the advantages of displaying SAR data in decibels and why we need to convert the data to a linear scale in order to make meaningful calculations. Let’s start with importing some libraries.\n\\[\n\\text{logarithmic} \\longleftrightarrow \\text{linear}\n\\] \\[\n[\\text{dB}] \\longleftrightarrow [\\text{m}^2 \\cdot \\text{m}^{-2}]\n\\]\nLet’s start by loading some sample data, in order to demonstrate why this conversion is important. Here we will have a look at some SAR data from the Sentinel-1. The data is provided in decibels (dB). In the following example, we will:",
    "crumbs": [
      "Microwave Remote Sensing",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Unit Conversion</span>"
    ]
  },
  {
    "objectID": "chapters/courses/microwave-remote-sensing/02_in_class_exercise.html#exploring-the-data",
    "href": "chapters/courses/microwave-remote-sensing/02_in_class_exercise.html#exploring-the-data",
    "title": "2  Unit Conversion",
    "section": "",
    "text": "load data from Sentinel-1\nvisualize the data in logarithmic scale\ncompare the data with linear scale",
    "crumbs": [
      "Microwave Remote Sensing",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Unit Conversion</span>"
    ]
  },
  {
    "objectID": "chapters/courses/microwave-remote-sensing/02_in_class_exercise.html#search-for-some-data",
    "href": "chapters/courses/microwave-remote-sensing/02_in_class_exercise.html#search-for-some-data",
    "title": "2  Unit Conversion",
    "section": "2.2 Search for some Data",
    "text": "2.2 Search for some Data\nNow, we start by loading data from Sentinel-1 from the EODC STAC Catalogue. We do this in the same way as in the previous notebook 1.\n\nlatmin, latmax = 48, 48.5\nlonmin, lonmax = 16, 17\nbounds = (lonmin, latmin, lonmax, latmax)\n\ntime_range = \"2022-01-01/2022-12-30\"\n\nitems = (\n    pystac_client.Client.open(\"https://stac.eodc.eu/api/v1\")\n    .search(\n        bbox=bounds,\n        collections=[\"SENTINEL1_SIG0_20M\"],\n        datetime=time_range,\n        limit=100,\n    )\n    .item_collection()\n)\n\nprint(len(items), \"scenes found\")\n\n708 scenes found\n\n\n\nbands = \"VV\"\ncrs = \"EPSG:27704\"  # Coordinate Reference System: EQUI7 Grid of Europe\nres = 20  # 20 meter\n\nsig0_dc = odc.stac.stac_load(\n    items,\n    bands=bands,\n    bbox=bounds,\n    chunks={\"time\": 5, \"x\": 600, \"y\": 600},\n)\n\nnodata = items[0].assets[\"VV\"].extra_fields[\"raster:bands\"][0][\"nodata\"]\nscale = items[0].assets[\"VV\"].extra_fields[\"raster:bands\"][0][\"scale\"]\n\nsig0_dc = (sig0_dc.where(sig0_dc != nodata) / scale).VV\nsig0_dc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'VV' (time: 708, y: 3150, x: 3978)&gt; Size: 35GB\ndask.array&lt;truediv, shape=(708, 3150, 3978), dtype=float32, chunksize=(5, 600, 600), chunktype=numpy.ndarray&gt;\nCoordinates:\n  * y            (y) float64 25kB 1.653e+06 1.653e+06 ... 1.59e+06 1.59e+06\n  * x            (x) float64 32kB 5.241e+06 5.241e+06 ... 5.32e+06 5.32e+06\n    spatial_ref  int32 4B 27704\n  * time         (time) datetime64[ns] 6kB 2022-01-01T16:42:42 ... 2022-12-29...xarray.DataArray'VV'time: 708y: 3150x: 3978dask.array&lt;chunksize=(5, 600, 600), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n33.05 GiB\n6.87 MiB\n\n\nShape\n(708, 3150, 3978)\n(5, 600, 600)\n\n\nDask graph\n5964 chunks in 7 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n                                                                                   3978 3150 708\n\n\n\n\nCoordinates: (4)y(y)float641.653e+06 1.653e+06 ... 1.59e+06units :metreresolution :-20.0crs :PROJCS[\"Azimuthal_Equidistant\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Azimuthal_Equidistant\"],PARAMETER[\"latitude_of_center\",53],PARAMETER[\"longitude_of_center\",24],PARAMETER[\"false_easting\",5837287.81977],PARAMETER[\"false_northing\",2121415.69617],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]]]array([1653150., 1653130., 1653110., ..., 1590210., 1590190., 1590170.])x(x)float645.241e+06 5.241e+06 ... 5.32e+06units :metreresolution :20.0crs :PROJCS[\"Azimuthal_Equidistant\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Azimuthal_Equidistant\"],PARAMETER[\"latitude_of_center\",53],PARAMETER[\"longitude_of_center\",24],PARAMETER[\"false_easting\",5837287.81977],PARAMETER[\"false_northing\",2121415.69617],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]]]array([5240690., 5240710., 5240730., ..., 5320190., 5320210., 5320230.])spatial_ref()int3227704spatial_ref :PROJCRS[\"Azimuthal_Equidistant\",BASEGEOGCRS[\"WGS 84\",DATUM[\"World Geodetic System 1984\",ELLIPSOID[\"WGS 84\",6378137,298.257223563,LENGTHUNIT[\"metre\",1]]],PRIMEM[\"Greenwich\",0,ANGLEUNIT[\"degree\",0.0174532925199433]],ID[\"EPSG\",4326]],CONVERSION[\"unnamed\",METHOD[\"Azimuthal Equidistant\",ID[\"EPSG\",1125]],PARAMETER[\"Latitude of natural origin\",53,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8801]],PARAMETER[\"Longitude of natural origin\",24,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8802]],PARAMETER[\"False easting\",5837287.81977,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8806]],PARAMETER[\"False northing\",2121415.69617,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8807]]],CS[Cartesian,2],AXIS[\"(E)\",east,ORDER[1],LENGTHUNIT[\"metre\",1,ID[\"EPSG\",9001]]],AXIS[\"(N)\",north,ORDER[2],LENGTHUNIT[\"metre\",1,ID[\"EPSG\",9001]]]]crs_wkt :PROJCRS[\"Azimuthal_Equidistant\",BASEGEOGCRS[\"WGS 84\",DATUM[\"World Geodetic System 1984\",ELLIPSOID[\"WGS 84\",6378137,298.257223563,LENGTHUNIT[\"metre\",1]]],PRIMEM[\"Greenwich\",0,ANGLEUNIT[\"degree\",0.0174532925199433]],ID[\"EPSG\",4326]],CONVERSION[\"unnamed\",METHOD[\"Azimuthal Equidistant\",ID[\"EPSG\",1125]],PARAMETER[\"Latitude of natural origin\",53,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8801]],PARAMETER[\"Longitude of natural origin\",24,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8802]],PARAMETER[\"False easting\",5837287.81977,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8806]],PARAMETER[\"False northing\",2121415.69617,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8807]]],CS[Cartesian,2],AXIS[\"(E)\",east,ORDER[1],LENGTHUNIT[\"metre\",1,ID[\"EPSG\",9001]]],AXIS[\"(N)\",north,ORDER[2],LENGTHUNIT[\"metre\",1,ID[\"EPSG\",9001]]]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :Azimuthal_Equidistantgrid_mapping_name :azimuthal_equidistantlatitude_of_projection_origin :53.0longitude_of_projection_origin :24.0false_easting :5837287.81977false_northing :2121415.69617GeoTransform :5240680 20 0 1653160 0 -20array(27704, dtype=int32)time(time)datetime64[ns]2022-01-01T16:42:42 ... 2022-12-...array(['2022-01-01T16:42:42.000000000', '2022-01-01T16:43:07.000000000',\n       '2022-01-01T16:43:32.000000000', ..., '2022-12-29T05:18:05.000000000',\n       '2022-12-29T05:18:30.000000000', '2022-12-29T05:18:55.000000000'],\n      dtype='datetime64[ns]')Indexes: (3)yPandasIndexPandasIndex(Index([1653150.0, 1653130.0, 1653110.0, 1653090.0, 1653070.0, 1653050.0,\n       1653030.0, 1653010.0, 1652990.0, 1652970.0,\n       ...\n       1590350.0, 1590330.0, 1590310.0, 1590290.0, 1590270.0, 1590250.0,\n       1590230.0, 1590210.0, 1590190.0, 1590170.0],\n      dtype='float64', name='y', length=3150))xPandasIndexPandasIndex(Index([5240690.0, 5240710.0, 5240730.0, 5240750.0, 5240770.0, 5240790.0,\n       5240810.0, 5240830.0, 5240850.0, 5240870.0,\n       ...\n       5320050.0, 5320070.0, 5320090.0, 5320110.0, 5320130.0, 5320150.0,\n       5320170.0, 5320190.0, 5320210.0, 5320230.0],\n      dtype='float64', name='x', length=3978))timePandasIndexPandasIndex(DatetimeIndex(['2022-01-01 16:42:42', '2022-01-01 16:43:07',\n               '2022-01-01 16:43:32', '2022-01-03 05:17:59',\n               '2022-01-03 05:18:24', '2022-01-03 05:18:49',\n               '2022-01-06 16:50:45', '2022-01-06 16:51:10',\n               '2022-01-06 16:51:35', '2022-01-08 16:34:40',\n               ...\n               '2022-12-25 16:59:51', '2022-12-26 04:53:34',\n               '2022-12-26 04:53:59', '2022-12-26 04:54:24',\n               '2022-12-27 16:42:48', '2022-12-27 16:43:13',\n               '2022-12-27 16:43:38', '2022-12-29 05:18:05',\n               '2022-12-29 05:18:30', '2022-12-29 05:18:55'],\n              dtype='datetime64[ns]', name='time', length=708, freq=None))Attributes: (0)",
    "crumbs": [
      "Microwave Remote Sensing",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Unit Conversion</span>"
    ]
  },
  {
    "objectID": "chapters/courses/microwave-remote-sensing/02_in_class_exercise.html#comparison-of-the-data-in-db-and-linear-scale",
    "href": "chapters/courses/microwave-remote-sensing/02_in_class_exercise.html#comparison-of-the-data-in-db-and-linear-scale",
    "title": "2  Unit Conversion",
    "section": "2.3 Comparison of the Data in dB and Linear Scale",
    "text": "2.3 Comparison of the Data in dB and Linear Scale\nIn the next two cells we will select a subset of the data. This is done to reduce the amount of data we are working with. The precice workflow is not important for now, since the theory is explained after the cells. They are just here to show the data we are working with.\n\nsubset = sig0_dc.sel(time=slice(\"2022-07-01\", \"2022-07-07\"))\nsubset = subset.dropna(\"time\", how=\"all\")\n\nNow plot the data.\n\naoi = subset.isel(time=0, x=slice(0, 500), y=slice(0, 500))\naoi_lin = 10 ** (aoi / 10)\n\nfig, ax = plt.subplots(2, 3, figsize=(14, 8))\n# upper left\nax_ul = ax[0, 0]\naoi.plot.imshow(robust=True, ax=ax_ul, cmap=\"Greys_r\")\nax_ul.set_title(r\"$\\sigma^0$ [$dB$] (robust plot)\")\nax_ul.axes.set_aspect(\"equal\")\n\n# upper middle\nax_um = ax[0, 1]\naoi.plot.imshow(robust=False, ax=ax_um, cmap=\"Greys_r\")\nax_um.set_title(r\"$\\sigma^0$ [$dB$] (not robust plot)\")\nax_um.axes.set_aspect(\"equal\")\n\n# upper right\nax_ur = ax[0, 2]\naoi.plot.hist(bins=50, ax=ax_ur, edgecolor=\"black\")\nax_ur.set_xlabel(r\"$\\sigma^0$ [$dB$]\")\nax_ur.set_title(r\"$\\sigma^0$ [$dB$] distribution\")\nax_ur.set_ylabel(\"n (number of pixels)\")\n\n# lower left\nax_ll = ax[1, 0]\naoi_lin.plot.imshow(robust=True, ax=ax_ll, cmap=\"Greys_r\")\nax_ll.set_title(r\"$\\sigma^0$ [$m^2 \\cdot m^{-2}$] (robust plot)\")\nax_ll.axes.set_aspect(\"equal\")\n\n# lower middle\nax_lm = ax[1, 1]\naoi_lin.plot.imshow(robust=False, ax=ax_lm, cmap=\"Greys_r\")\nax_lm.set_title(r\"$\\sigma^0$ [$m^2 \\cdot m^{-2}$] (not robust plot)\")\nax_lm.axes.set_aspect(\"equal\")\n\n# lower right\nax_lr = ax[1, 2]\naoi_lin.plot.hist(bins=50, ax=ax_lr, edgecolor=\"black\")\nax_lr.set_xlabel(r\"$\\sigma^0$ [$m^2 \\cdot m^{-2}$]\")\nax_lr.set_ylabel(\"n (number of pixels)\")\nax_lr.set_title(r\"$\\sigma^0$ [$m^2 \\cdot m^{-2}$] distribution\")\n\ntitle = (\n    r\"Sentinel-1 backscatter $\\sigma^0$ comparison\"\n    + r\" in linear and logarithmic domain\"\n)\nfig.suptitle(title, horizontalalignment=\"center\")\nplt.tight_layout()\n\n\n\n\n\n\n\n\nFigure 1: Visually comparing \\(\\sigma^0\\) on a logarithmic and linear scale (left column). In addition, the benefit of using the robust plotting method is shown (middle column). The robust argument uses the 2nd and 98th percentiles of the data to compute the color limits to eliminate washing out the plot due to data outliers.\nIn the plot above you can see the difference between the two scales. The values in dB are more evenly distributed and are therefore easier to plot. The values in linear scale are more spread out and are therefore harder to interpret. This is why we use the dB scale for plotting/visualization.\nWhile the logarithmic scale facilitates visual interpretation, it has implications for mathematical operations. In the following, we’ll have a closer look at this. But first, let’s see how we can convert between the linear and the logarithmic domains.",
    "crumbs": [
      "Microwave Remote Sensing",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Unit Conversion</span>"
    ]
  },
  {
    "objectID": "chapters/courses/microwave-remote-sensing/02_in_class_exercise.html#conversion-formulas",
    "href": "chapters/courses/microwave-remote-sensing/02_in_class_exercise.html#conversion-formulas",
    "title": "2  Unit Conversion",
    "section": "2.4 Conversion Formulas",
    "text": "2.4 Conversion Formulas\nThe decibel (dB) is a logarithmic unit used to express the ratio of two values of a physical quantity, often power or intensity. In the case of SAR data, the backscatter coefficient is often expressed in dB to facilitate visualization.\nIn order to convert the data from dB to linear scale, we use the following formula. Let \\(D\\) be the original value (dB) and \\(I\\) the converted value (\\(m^2m^{-2}\\)). The conversion of units can be expressed as: \\[\nD =  10  \\cdot \\log_{10} (I) = 10 \\cdot \\log_{10} (e) \\cdot \\ln (I)\\longrightarrow [dB]\n\\] Similarly, the conversion back to the original unit can be expressed as: \\[\nI = e^{\\frac{D}{10\\cdot \\log_{10}(e)}} = 10^{\\frac{D}{10}} \\longrightarrow [m^2m^{-2}]\n\\] You can find these formulas in the script for Microwave Remote Sensing on page 136 (equation 6.40).\nNow let’s implement the conversion in Python.\n\ndef lin2db(val: float | int) -&gt; float:\n    \"\"\"\n    Converts value from linear to dB units.\n\n    :param val: Value in linear units.\n    :type val: float|int\n    :return: Value in dB.\n    :rtype: float\n    \"\"\"\n    return 10 * np.log10(val)\n\n\ndef db2lin(val: float | int) -&gt; float:\n    \"\"\"\n    Converts value from dB to linear units.\n\n    :param val: Value in dB.\n    :type val: float|int\n    :return: Value in linear units.\n    :rtype: float\n    \"\"\"\n    return 10 ** (val / 10)\n\nWhen performing mathematical operations with SAR data it is important to be aware, that adding values in the logarithmic scale doesn’t work in the same way as adding regular (linear) values. This is because in the logarithmic scale, each unit step represents an equal multiplication. This means that an addition of two values in the logarithmic scale equals a multiplication of the values in the linear scale. Vice versa, a subtraction in a logarithmic scale equals a division in a linear scale. Let’s have a look at an example, where we add two values, once without the conversion to linear scale and once with the conversion to linear scale.\n\n# Logarithmic addition\n# Values in linear and decibel units\nval1_db, val2_db = 10, 12\n\n# Logarithmic addition\nsum_db = val1_db + val2_db\nprint(\"Logarithmic Addition:\")\nprint(f\"Logarithmic values: \\t{val1_db: &lt;5}, {val2_db: &lt;5} [dB]\")\nprint(f\"Logarithmic sum: \\t{val1_db} + {val2_db} = {sum_db: &lt;5} [dB]\")\n\n# Linear addition\nval1_lin, val2_lin = db2lin(val1_db), db2lin(val2_db)\nsum_lin = val1_lin + val2_lin\nprint(\"\\nLinear Addition:\")\nprint(f\"\"\"Linear values: \\t\\t{val1_lin: &lt;5}, {val2_lin: &lt;5.2f} [lin]\n      \\t\\t\\t(converted from dB)\"\"\")\nprint(f\"Linear sum: \\t\\t{val1_lin} + {val2_lin: .2f} = {sum_lin: .2f} [lin]\")\nprint(f\"\\t\\t\\t= {lin2db(sum_lin): .2f} [dB]\")\n\nLogarithmic Addition:\nLogarithmic values:     10   , 12    [dB]\nLogarithmic sum:    10 + 12 = 22    [dB]\n\nLinear Addition:\nLinear values:      10.0 , 15.85 [lin]\n                (converted from dB)\nLinear sum:         10.0 +  15.85 =  25.85 [lin]\n            =  14.12 [dB]\n\n\nAs you can see, the values in dB and in linear scale differ quite a bit. In the example above, the values differ by a factor of around 6 when looked at in linear scale.\nNow that we have some data, we will have a look at some practical examples where we will convert the data to linear scale. When we try to calculate the average \\(\\sigma^0\\) value across the scene, we need to do this by converting the data to linear scale first and then calculating the average and converting it back to dB.",
    "crumbs": [
      "Microwave Remote Sensing",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Unit Conversion</span>"
    ]
  },
  {
    "objectID": "chapters/courses/microwave-remote-sensing/02_in_class_exercise.html#creating-a-monthly-mosaic",
    "href": "chapters/courses/microwave-remote-sensing/02_in_class_exercise.html#creating-a-monthly-mosaic",
    "title": "2  Unit Conversion",
    "section": "2.5 Creating a Monthly Mosaic",
    "text": "2.5 Creating a Monthly Mosaic\nSo in the beginning we have lazily loaded data for an area across a whole year. We therefore have around 700 images. We will now essentially compress the data of each month into one timestamp. This is done by using the resampling method together with an operation method like mean that includes summation. Since the data is in dB we need to convert it to linear scale first, then we can resample the data and convert it back to dB.\n\n# Convert to linear scale and calculate monthly means\n# Conversion by calculating with the xarray Object\nsig0_lin = 10 ** (sig0_dc / 10)\n\n# Resample to monthly means. Time accepts intervals identical to the pandas\n# resample function. 'D' for days, 'W' for weeks, 'ME' for months.\nsig0_lin_monthly = sig0_lin.resample(time=\"1ME\").mean()\n\n# Convert back to dB scale\n# Conversion by applying a function\nsig0_monthly = lin2db(sig0_lin_monthly)\nsig0_monthly\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'VV' (time: 12, y: 3150, x: 3978)&gt; Size: 601MB\ndask.array&lt;mul, shape=(12, 3150, 3978), dtype=float32, chunksize=(1, 600, 600), chunktype=numpy.ndarray&gt;\nCoordinates:\n  * y            (y) float64 25kB 1.653e+06 1.653e+06 ... 1.59e+06 1.59e+06\n  * x            (x) float64 32kB 5.241e+06 5.241e+06 ... 5.32e+06 5.32e+06\n    spatial_ref  int32 4B 27704\n  * time         (time) datetime64[ns] 96B 2022-01-31 2022-02-28 ... 2022-12-31xarray.DataArray'VV'time: 12y: 3150x: 3978dask.array&lt;chunksize=(1, 600, 600), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n573.61 MiB\n1.37 MiB\n\n\nShape\n(12, 3150, 3978)\n(1, 600, 600)\n\n\nDask graph\n504 chunks in 60 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n                                                                     3978 3150 12\n\n\n\n\nCoordinates: (4)y(y)float641.653e+06 1.653e+06 ... 1.59e+06units :metreresolution :-20.0crs :PROJCS[\"Azimuthal_Equidistant\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Azimuthal_Equidistant\"],PARAMETER[\"latitude_of_center\",53],PARAMETER[\"longitude_of_center\",24],PARAMETER[\"false_easting\",5837287.81977],PARAMETER[\"false_northing\",2121415.69617],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]]]array([1653150., 1653130., 1653110., ..., 1590210., 1590190., 1590170.])x(x)float645.241e+06 5.241e+06 ... 5.32e+06units :metreresolution :20.0crs :PROJCS[\"Azimuthal_Equidistant\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Azimuthal_Equidistant\"],PARAMETER[\"latitude_of_center\",53],PARAMETER[\"longitude_of_center\",24],PARAMETER[\"false_easting\",5837287.81977],PARAMETER[\"false_northing\",2121415.69617],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]]]array([5240690., 5240710., 5240730., ..., 5320190., 5320210., 5320230.])spatial_ref()int3227704spatial_ref :PROJCRS[\"Azimuthal_Equidistant\",BASEGEOGCRS[\"WGS 84\",DATUM[\"World Geodetic System 1984\",ELLIPSOID[\"WGS 84\",6378137,298.257223563,LENGTHUNIT[\"metre\",1]]],PRIMEM[\"Greenwich\",0,ANGLEUNIT[\"degree\",0.0174532925199433]],ID[\"EPSG\",4326]],CONVERSION[\"unnamed\",METHOD[\"Azimuthal Equidistant\",ID[\"EPSG\",1125]],PARAMETER[\"Latitude of natural origin\",53,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8801]],PARAMETER[\"Longitude of natural origin\",24,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8802]],PARAMETER[\"False easting\",5837287.81977,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8806]],PARAMETER[\"False northing\",2121415.69617,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8807]]],CS[Cartesian,2],AXIS[\"(E)\",east,ORDER[1],LENGTHUNIT[\"metre\",1,ID[\"EPSG\",9001]]],AXIS[\"(N)\",north,ORDER[2],LENGTHUNIT[\"metre\",1,ID[\"EPSG\",9001]]]]crs_wkt :PROJCRS[\"Azimuthal_Equidistant\",BASEGEOGCRS[\"WGS 84\",DATUM[\"World Geodetic System 1984\",ELLIPSOID[\"WGS 84\",6378137,298.257223563,LENGTHUNIT[\"metre\",1]]],PRIMEM[\"Greenwich\",0,ANGLEUNIT[\"degree\",0.0174532925199433]],ID[\"EPSG\",4326]],CONVERSION[\"unnamed\",METHOD[\"Azimuthal Equidistant\",ID[\"EPSG\",1125]],PARAMETER[\"Latitude of natural origin\",53,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8801]],PARAMETER[\"Longitude of natural origin\",24,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8802]],PARAMETER[\"False easting\",5837287.81977,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8806]],PARAMETER[\"False northing\",2121415.69617,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8807]]],CS[Cartesian,2],AXIS[\"(E)\",east,ORDER[1],LENGTHUNIT[\"metre\",1,ID[\"EPSG\",9001]]],AXIS[\"(N)\",north,ORDER[2],LENGTHUNIT[\"metre\",1,ID[\"EPSG\",9001]]]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :Azimuthal_Equidistantgrid_mapping_name :azimuthal_equidistantlatitude_of_projection_origin :53.0longitude_of_projection_origin :24.0false_easting :5837287.81977false_northing :2121415.69617GeoTransform :5240680 20 0 1653160 0 -20array(27704, dtype=int32)time(time)datetime64[ns]2022-01-31 ... 2022-12-31array(['2022-01-31T00:00:00.000000000', '2022-02-28T00:00:00.000000000',\n       '2022-03-31T00:00:00.000000000', '2022-04-30T00:00:00.000000000',\n       '2022-05-31T00:00:00.000000000', '2022-06-30T00:00:00.000000000',\n       '2022-07-31T00:00:00.000000000', '2022-08-31T00:00:00.000000000',\n       '2022-09-30T00:00:00.000000000', '2022-10-31T00:00:00.000000000',\n       '2022-11-30T00:00:00.000000000', '2022-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Indexes: (3)yPandasIndexPandasIndex(Index([1653150.0, 1653130.0, 1653110.0, 1653090.0, 1653070.0, 1653050.0,\n       1653030.0, 1653010.0, 1652990.0, 1652970.0,\n       ...\n       1590350.0, 1590330.0, 1590310.0, 1590290.0, 1590270.0, 1590250.0,\n       1590230.0, 1590210.0, 1590190.0, 1590170.0],\n      dtype='float64', name='y', length=3150))xPandasIndexPandasIndex(Index([5240690.0, 5240710.0, 5240730.0, 5240750.0, 5240770.0, 5240790.0,\n       5240810.0, 5240830.0, 5240850.0, 5240870.0,\n       ...\n       5320050.0, 5320070.0, 5320090.0, 5320110.0, 5320130.0, 5320150.0,\n       5320170.0, 5320190.0, 5320210.0, 5320230.0],\n      dtype='float64', name='x', length=3978))timePandasIndexPandasIndex(DatetimeIndex(['2022-01-31', '2022-02-28', '2022-03-31', '2022-04-30',\n               '2022-05-31', '2022-06-30', '2022-07-31', '2022-08-31',\n               '2022-09-30', '2022-10-31', '2022-11-30', '2022-12-31'],\n              dtype='datetime64[ns]', name='time', freq='ME'))Attributes: (0)\n\n\nThe dataset has now only 12 timestamps, one for each month. Next, we want to calculate the average \\(\\sigma^0\\) value across the scene for one month. We will do this again by converting the data to linear scale first and then calculating the average and converting it back to dB.\n\n# Lets take a data array with db values\ndb_array = sig0_monthly.sel(time=\"2022-07-30\", method=\"nearest\")\n\n# Compute the linear values\nlin_array = db2lin(db_array)\n\n\n# Compute the average backscatter value in linear units across the whole scene\nlin_mean = lin_array.mean()\nprint(f\"Average backscatter value in linear units: {lin_mean.values: .3f}\")\ndb_from_lin_mean = lin2db(lin_mean)\nprint(f\"That value in dB: {db_from_lin_mean.values: .3f}\\n\")\n\n# Compute the average backscatter value in dB across the whole scene\ndb_mean = db_array.mean()\nprint(f\"Average backscatter value in dB: {db_mean.values: .3f}\")\n\nAverage backscatter value in linear units:  0.124\nThat value in dB: -9.060\n\nAverage backscatter value in dB: -10.550\n\n\nAs you can see in the example, the mean values across the scene are different in dB and linear scale. Therefore, it is important to be aware in which scale the data is stored to perform the correct type of mathematical operation or always convert the data to linear scale before doing any calculations.",
    "crumbs": [
      "Microwave Remote Sensing",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Unit Conversion</span>"
    ]
  },
  {
    "objectID": "chapters/courses/microwave-remote-sensing/02_in_class_exercise.html#save-mean-mosaic-as-tif-file",
    "href": "chapters/courses/microwave-remote-sensing/02_in_class_exercise.html#save-mean-mosaic-as-tif-file",
    "title": "2  Unit Conversion",
    "section": "2.6 Save Mean Mosaic as Tif File",
    "text": "2.6 Save Mean Mosaic as Tif File\nOften we want to store the output of a computation permanently on a file system. The most common file format for this is a GeoTIFF (TIF file with additional information on the georeference). The following cell indicates how this can be easily done with Xarray. When we want to store the data as a GeoTIFF we need to make sure to provide a spatial reference to geolocate the data. The best way to check whether the Xarray has a coordinate reference system (CRS) is by using the rioxarray rio.crs accessor. More about this in notebook 4.\n\n# Select some data which we want to save\ndata_2_save = sig0_monthly.sel(time=\"2022-07-30\", method=\"nearest\")\ndata_2_save.rio.crs\n\nCRS.from_wkt('PROJCS[\"Azimuthal_Equidistant\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Azimuthal_Equidistant\"],PARAMETER[\"latitude_of_center\",53],PARAMETER[\"longitude_of_center\",24],PARAMETER[\"false_easting\",5837287.81977],PARAMETER[\"false_northing\",2121415.69617],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]')\n\n\nIn this case, the spatial reference is the EPSG Code EPSG:27704, which is the Equi7Grid Europe. As the output dataarray already has a spatial reference we now save it as a raster file\n\n# Save the data\ndata_2_save.rio.to_raster(\n    \"sig0_mean_mosaic_july.tif\", tiled=True, driver=\"GTiff\", compress=\"LZW\"\n)\n\n\n# Load the data again (for demonstration purposes)\nloaded_data = xr.open_dataset(\"sig0_mean_mosaic_july.tif\", engine=\"rasterio\")\nloaded_data\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 50MB\nDimensions:      (band: 1, x: 3978, y: 3150)\nCoordinates:\n  * band         (band) int64 8B 1\n  * x            (x) float64 32kB 5.241e+06 5.241e+06 ... 5.32e+06 5.32e+06\n  * y            (y) float64 25kB 1.653e+06 1.653e+06 ... 1.59e+06 1.59e+06\n    spatial_ref  int64 8B ...\nData variables:\n    band_data    (band, y, x) float32 50MB ...xarray.DatasetDimensions:band: 1x: 3978y: 3150Coordinates: (4)band(band)int641array([1])x(x)float645.241e+06 5.241e+06 ... 5.32e+06array([5240690., 5240710., 5240730., ..., 5320190., 5320210., 5320230.])y(y)float641.653e+06 1.653e+06 ... 1.59e+06array([1653150., 1653130., 1653110., ..., 1590210., 1590190., 1590170.])spatial_ref()int64...crs_wkt :PROJCS[\"Azimuthal_Equidistant\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Azimuthal_Equidistant\"],PARAMETER[\"latitude_of_center\",53],PARAMETER[\"longitude_of_center\",24],PARAMETER[\"false_easting\",5837287.81977],PARAMETER[\"false_northing\",2121415.69617],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :Azimuthal_Equidistantgrid_mapping_name :azimuthal_equidistantlatitude_of_projection_origin :53.0longitude_of_projection_origin :24.0false_easting :5837287.81977false_northing :2121415.69617spatial_ref :PROJCS[\"Azimuthal_Equidistant\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Azimuthal_Equidistant\"],PARAMETER[\"latitude_of_center\",53],PARAMETER[\"longitude_of_center\",24],PARAMETER[\"false_easting\",5837287.81977],PARAMETER[\"false_northing\",2121415.69617],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]GeoTransform :5240680.0 20.0 0.0 1653160.0 0.0 -20.0[1 values with dtype=int64]Data variables: (1)band_data(band, y, x)float32...AREA_OR_POINT :Arealong_name :VV[12530700 values with dtype=float32]Indexes: (3)bandPandasIndexPandasIndex(Index([1], dtype='int64', name='band'))xPandasIndexPandasIndex(Index([5240690.0, 5240710.0, 5240730.0, 5240750.0, 5240770.0, 5240790.0,\n       5240810.0, 5240830.0, 5240850.0, 5240870.0,\n       ...\n       5320050.0, 5320070.0, 5320090.0, 5320110.0, 5320130.0, 5320150.0,\n       5320170.0, 5320190.0, 5320210.0, 5320230.0],\n      dtype='float64', name='x', length=3978))yPandasIndexPandasIndex(Index([1653150.0, 1653130.0, 1653110.0, 1653090.0, 1653070.0, 1653050.0,\n       1653030.0, 1653010.0, 1652990.0, 1652970.0,\n       ...\n       1590350.0, 1590330.0, 1590310.0, 1590290.0, 1590270.0, 1590250.0,\n       1590230.0, 1590210.0, 1590190.0, 1590170.0],\n      dtype='float64', name='y', length=3150))Attributes: (0)",
    "crumbs": [
      "Microwave Remote Sensing",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Unit Conversion</span>"
    ]
  },
  {
    "objectID": "chapters/templates/classification.html",
    "href": "chapters/templates/classification.html",
    "title": "Appendix A — Classification of Sentinel-2 imagery",
    "section": "",
    "text": "A.1 Data Acquisition\nIn this chapter, we will employ machine learning techniques to classify a scene using satellite imagery. Specifically, we will utilize scikit-learn to implement two distinct classifiers and subsequently compare their results. To begin, we need to import the following modules.\nfrom datetime import datetime, timedelta\n\nimport xarray as xr\nimport pystac_client\nimport odc.stac\nimport rioxarray  # noqa: F401\nimport geopandas as gpd\nfrom odc.geo.geobox import GeoBox\nfrom shapely.geometry import Polygon\n\nimport cmcrameri as cmc  # noqa: F401\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as colors\nimport pandas as pd\n\n# Scikit Learn\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import train_test_split\nBefore we start, we need to load the data. We will use odc-stac to obtain data from Earth Search by Element 84. Here we define the area of interest and the time frame, aswell as the EPSG code and the resolution.",
    "crumbs": [
      "Appendices",
      "Templates",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Classification of Sentinel-2 imagery</span>"
    ]
  },
  {
    "objectID": "chapters/templates/classification.html#data-acquisition",
    "href": "chapters/templates/classification.html#data-acquisition",
    "title": "Appendix A — Classification of Sentinel-2 imagery",
    "section": "",
    "text": "A.1.1 Searching in the Catalog\nThe module odc-stac provides access to free, open source satelite data. To retrieve the data, we must define several parameters that specify the location and time period for the satellite data. Additionally, we must specify the data collection we wish to access, as multiple collections are available. In this example, we will use multispectral imagery from the Sentinel-2 satellite.\n\ndx = 0.0006  # 60m resolution\nepsg = 4326\n\n# Set Spatial extent\nlatmin, latmax = 47.86, 48.407\nlonmin, lonmax = 16.32, 16.9\nbounds = (lonmin, latmin, lonmax, latmax)\n\n\n# Set Temporal extent\nstart_date = datetime(year=2024, month=5, day=1)\nend_date = start_date + timedelta(days=10)\n\ntime_format = \"%Y-%m-%d\"\ndate_query = start_date.strftime(time_format) + \"/\" + end_date.strftime(time_format)\n\n# Search for Sentinel-2 data\nitems = pystac_client.Client.open(\n    \"https://earth-search.aws.element84.com/v1\"\n).search(\n    bbox=bounds,\n    collections=[\"sentinel-2-l2a\"],\n    datetime=date_query,\n    limit=100,\n).item_collection()\nprint(len(items), 'scenes found')\n\n10 scenes found\n\n\nWe will now focus on the area south-east of Vienna, where the Nationalpark Donauauen is situated. The time frame we are interested in is the beginning of May 2024. After passing these parameters to the stac-catalog we have found 10 scenes that we can use for our analysis.\n\n\nA.1.2 Loading the Data\nNow we will load the data directly into an xarray dataset, which we can use to perform computations on the data. xarray is a powerful library for working with multi-dimensional arrays, making it well-suited for handling satellite data.\nHere’s how we can load the data using odc-stac and xarray:\n\n# define a geobox for my region\ngeobox = GeoBox.from_bbox(bounds, crs=f\"epsg:{epsg}\", resolution=dx)\n\n# lazily combine items into a datacube\ndc = odc.stac.load(\n    items,\n    bands=[\"scl\", \"red\", \"green\", \"blue\", \"nir\"],\n    chunks={'time': 5, 'x': 600, 'y': 600},\n    geobox=geobox,\n    resampling=\"bilinear\",\n)\ndc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 79MB\nDimensions:      (latitude: 913, longitude: 967, time: 10)\nCoordinates:\n  * latitude     (latitude) float64 7kB 48.41 48.41 48.41 ... 47.86 47.86 47.86\n  * longitude    (longitude) float64 8kB 16.32 16.32 16.32 ... 16.9 16.9 16.9\n    spatial_ref  int32 4B 4326\n  * time         (time) datetime64[ns] 80B 2024-05-01T09:57:21.858000 ... 202...\nData variables:\n    scl          (time, latitude, longitude) uint8 9MB dask.array&lt;chunksize=(5, 600, 600), meta=np.ndarray&gt;\n    red          (time, latitude, longitude) uint16 18MB dask.array&lt;chunksize=(5, 600, 600), meta=np.ndarray&gt;\n    green        (time, latitude, longitude) uint16 18MB dask.array&lt;chunksize=(5, 600, 600), meta=np.ndarray&gt;\n    blue         (time, latitude, longitude) uint16 18MB dask.array&lt;chunksize=(5, 600, 600), meta=np.ndarray&gt;\n    nir          (time, latitude, longitude) uint16 18MB dask.array&lt;chunksize=(5, 600, 600), meta=np.ndarray&gt;xarray.DatasetDimensions:latitude: 913longitude: 967time: 10Coordinates: (4)latitude(latitude)float6448.41 48.41 48.41 ... 47.86 47.86units :degrees_northresolution :-0.0006crs :EPSG:4326array([48.4071, 48.4065, 48.4059, ..., 47.8611, 47.8605, 47.8599], shape=(913,))longitude(longitude)float6416.32 16.32 16.32 ... 16.9 16.9units :degrees_eastresolution :0.0006crs :EPSG:4326array([16.3203, 16.3209, 16.3215, ..., 16.8987, 16.8993, 16.8999], shape=(967,))spatial_ref()int324326spatial_ref :GEOGCRS[\"WGS 84\",ENSEMBLE[\"World Geodetic System 1984 ensemble\",MEMBER[\"World Geodetic System 1984 (Transit)\"],MEMBER[\"World Geodetic System 1984 (G730)\"],MEMBER[\"World Geodetic System 1984 (G873)\"],MEMBER[\"World Geodetic System 1984 (G1150)\"],MEMBER[\"World Geodetic System 1984 (G1674)\"],MEMBER[\"World Geodetic System 1984 (G1762)\"],MEMBER[\"World Geodetic System 1984 (G2139)\"],MEMBER[\"World Geodetic System 1984 (G2296)\"],ELLIPSOID[\"WGS 84\",6378137,298.257223563,LENGTHUNIT[\"metre\",1]],ENSEMBLEACCURACY[2.0]],PRIMEM[\"Greenwich\",0,ANGLEUNIT[\"degree\",0.0174532925199433]],CS[ellipsoidal,2],AXIS[\"geodetic latitude (Lat)\",north,ORDER[1],ANGLEUNIT[\"degree\",0.0174532925199433]],AXIS[\"geodetic longitude (Lon)\",east,ORDER[2],ANGLEUNIT[\"degree\",0.0174532925199433]],USAGE[SCOPE[\"Horizontal component of 3D system.\"],AREA[\"World.\"],BBOX[-90,-180,90,180]],ID[\"EPSG\",4326]]crs_wkt :GEOGCRS[\"WGS 84\",ENSEMBLE[\"World Geodetic System 1984 ensemble\",MEMBER[\"World Geodetic System 1984 (Transit)\"],MEMBER[\"World Geodetic System 1984 (G730)\"],MEMBER[\"World Geodetic System 1984 (G873)\"],MEMBER[\"World Geodetic System 1984 (G1150)\"],MEMBER[\"World Geodetic System 1984 (G1674)\"],MEMBER[\"World Geodetic System 1984 (G1762)\"],MEMBER[\"World Geodetic System 1984 (G2139)\"],MEMBER[\"World Geodetic System 1984 (G2296)\"],ELLIPSOID[\"WGS 84\",6378137,298.257223563,LENGTHUNIT[\"metre\",1]],ENSEMBLEACCURACY[2.0]],PRIMEM[\"Greenwich\",0,ANGLEUNIT[\"degree\",0.0174532925199433]],CS[ellipsoidal,2],AXIS[\"geodetic latitude (Lat)\",north,ORDER[1],ANGLEUNIT[\"degree\",0.0174532925199433]],AXIS[\"geodetic longitude (Lon)\",east,ORDER[2],ANGLEUNIT[\"degree\",0.0174532925199433]],USAGE[SCOPE[\"Horizontal component of 3D system.\"],AREA[\"World.\"],BBOX[-90,-180,90,180]],ID[\"EPSG\",4326]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984 ensemblegrid_mapping_name :latitude_longitudeGeoTransform :16.320000000000000284217094 0.000599999999999999947438 0 48.407399999999995543475961 0 -0.000599999999999999947438array(4326, dtype=int32)time(time)datetime64[ns]2024-05-01T09:57:21.858000 ... 2...array(['2024-05-01T09:57:21.858000000', '2024-05-01T09:57:24.892000000',\n       '2024-05-04T10:07:18.103000000', '2024-05-04T10:07:22.389000000',\n       '2024-05-06T09:57:19.789000000', '2024-05-06T09:57:22.823000000',\n       '2024-05-09T10:07:16.090000000', '2024-05-09T10:07:20.373000000',\n       '2024-05-11T09:57:22.239000000', '2024-05-11T09:57:25.274000000'],\n      dtype='datetime64[ns]')Data variables: (5)scl(time, latitude, longitude)uint8dask.array&lt;chunksize=(5, 600, 600), meta=np.ndarray&gt;nodata :0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n8.42 MiB\n1.72 MiB\n\n\nShape\n(10, 913, 967)\n(5, 600, 600)\n\n\nDask graph\n8 chunks in 3 graph layers\n\n\nData type\nuint8 numpy.ndarray\n\n\n\n\n                               967 913 10\n\n\n\n\nred(time, latitude, longitude)uint16dask.array&lt;chunksize=(5, 600, 600), meta=np.ndarray&gt;nodata :0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n16.84 MiB\n3.43 MiB\n\n\nShape\n(10, 913, 967)\n(5, 600, 600)\n\n\nDask graph\n8 chunks in 3 graph layers\n\n\nData type\nuint16 numpy.ndarray\n\n\n\n\n                               967 913 10\n\n\n\n\ngreen(time, latitude, longitude)uint16dask.array&lt;chunksize=(5, 600, 600), meta=np.ndarray&gt;nodata :0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n16.84 MiB\n3.43 MiB\n\n\nShape\n(10, 913, 967)\n(5, 600, 600)\n\n\nDask graph\n8 chunks in 3 graph layers\n\n\nData type\nuint16 numpy.ndarray\n\n\n\n\n                               967 913 10\n\n\n\n\nblue(time, latitude, longitude)uint16dask.array&lt;chunksize=(5, 600, 600), meta=np.ndarray&gt;nodata :0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n16.84 MiB\n3.43 MiB\n\n\nShape\n(10, 913, 967)\n(5, 600, 600)\n\n\nDask graph\n8 chunks in 3 graph layers\n\n\nData type\nuint16 numpy.ndarray\n\n\n\n\n                               967 913 10\n\n\n\n\nnir(time, latitude, longitude)uint16dask.array&lt;chunksize=(5, 600, 600), meta=np.ndarray&gt;nodata :0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n16.84 MiB\n3.43 MiB\n\n\nShape\n(10, 913, 967)\n(5, 600, 600)\n\n\nDask graph\n8 chunks in 3 graph layers\n\n\nData type\nuint16 numpy.ndarray\n\n\n\n\n                               967 913 10\n\n\n\n\nIndexes: (3)latitudePandasIndexPandasIndex(Index([ 48.40709999999999, 48.406499999999994, 48.405899999999995,\n        48.40529999999999,  48.40469999999999,  48.40409999999999,\n       48.403499999999994, 48.402899999999995,  48.40229999999999,\n        48.40169999999999,\n       ...\n        47.86529999999999,  47.86469999999999,  47.86409999999999,\n       47.863499999999995, 47.862899999999996,  47.86229999999999,\n        47.86169999999999,  47.86109999999999, 47.860499999999995,\n       47.859899999999996],\n      dtype='float64', name='latitude', length=913))longitudePandasIndexPandasIndex(Index([           16.3203, 16.320899999999998,            16.3215,\n                  16.3221,            16.3227,            16.3233,\n                  16.3239,            16.3245,            16.3251,\n                  16.3257,\n       ...\n                  16.8945,            16.8951, 16.895699999999998,\n                  16.8963,            16.8969,            16.8975,\n                  16.8981, 16.898699999999998,            16.8993,\n                  16.8999],\n      dtype='float64', name='longitude', length=967))timePandasIndexPandasIndex(DatetimeIndex(['2024-05-01 09:57:21.858000', '2024-05-01 09:57:24.892000',\n               '2024-05-04 10:07:18.103000', '2024-05-04 10:07:22.389000',\n               '2024-05-06 09:57:19.789000', '2024-05-06 09:57:22.823000',\n               '2024-05-09 10:07:16.090000', '2024-05-09 10:07:20.373000',\n               '2024-05-11 09:57:22.239000', '2024-05-11 09:57:25.274000'],\n              dtype='datetime64[ns]', name='time', freq=None))Attributes: (0)",
    "crumbs": [
      "Appendices",
      "Templates",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Classification of Sentinel-2 imagery</span>"
    ]
  },
  {
    "objectID": "chapters/templates/classification.html#data-visualization",
    "href": "chapters/templates/classification.html#data-visualization",
    "title": "Appendix A — Classification of Sentinel-2 imagery",
    "section": "A.2 Data Visualization",
    "text": "A.2 Data Visualization\n\nA.2.1 RGB Image\nWith the image data now in our possession, we can proceed with computations and visualizations.\nFirst, we define a mask to exclude cloud cover and areas with missing data. Subsequently, we create a composite median image, where each pixel value represents the median value across all the scenes we have identified. This approach helps to eliminate clouds and outliers present in some of the images, thereby providing a clearer and more representative visualization of the scene.\n\n# define a mask for valid pixels (non-cloud)\ndef is_valid_pixel(data):\n    # include only vegetated, not_vegitated, water, and snow\n    return ((data &gt; 3) & (data &lt; 7)) | (data == 11)\n\n\ndc[\"valid\"] = is_valid_pixel(dc.scl)\n\n# compute the masked median\nrgb_median = (\n    dc[[\"red\", \"green\", \"blue\"]]\n    .where(dc.valid)\n    .to_dataarray(dim=\"band\")\n    .median(dim=\"time\")\n    .astype(int)\n)\n\n# plot the median composite\ntitle_rgb = (\n    \"RGB - Median Composite\"\n    + f\"\\n{start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\"\n)\nrgb_median.plot.imshow(robust=True).axes.set_title(title_rgb)\nplt.show()\n\n/usr/share/miniconda/envs/classification/lib/python3.12/site-packages/rasterio/warp.py:387: NotGeoreferencedWarning: Dataset has no geotransform, gcps, or rpcs. The identity matrix will be returned.\n  dest = _reproject(\n\n\n\n\n\n\n\n\n\n\n\nA.2.2 False Color Image\nIn addition to the regular RGB Image, we can swap any of the bands from the visible spectrum with any other bands. In this specific case the red band has been changed to the near infrared band. This allows us to see vegetated areas more clearly, since they now appear in a bright red color. This is due to the fact that plants absorb regular red light while reflecting near infrared light (NASA 2020).\n\n# compute a false color image\n# near infrared instead of red\nfc_median = (\n    dc[['nir', 'green', 'blue']]\n    .where(dc.valid)\n    .to_dataarray(dim=\"band\")\n    .transpose(..., \"band\")\n    .median(dim=\"time\")\n    .astype(int)\n)\n\ntitle_fc = (\n    \"False color - Median Composite\"+\n    f\"\\n{start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\"\n)\nfc_median.plot.imshow(robust=True).axes.set_title(title_fc)\nplt.show()\n\n\n\n\n\n\n\n\n\n\nA.2.3 NDVI Image\nTo get an first impression of the data, we can calculate the NDVI (Normalized Difference Vegetation Index) and plot it. The NDVI is calculated by useing the following formula. (Rouse et al. 1974)\n\\[\nNDVI = \\frac{NIR - Red}{NIR + Red}\n\\]\nThis gives us a good overview of the vegetation in the area. The values can range from -1 to 1 where the following meanings are associated with these values:\n\n-1 to 0 indicate dead plants or inanimate objects\n0 to 0.33 are unhealthy plants\n0.33 to 0.66 are moderatly healthy plants\n0.66 to 1 are very healthy plants\n\n\n# Normalized Difference Vegetation Index (NDVI)\ndef normalized_difference(a, b):\n    return (a - b * 1.0) / (a + b)\n\n\nndvi = normalized_difference(dc.nir, dc.red)\nndvi.median(dim=\"time\").plot.imshow(\n    cmap=\"cmc.cork\", vmin=-1, vmax=1\n).axes.set_title(\"NDVI\")\nplt.show()",
    "crumbs": [
      "Appendices",
      "Templates",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Classification of Sentinel-2 imagery</span>"
    ]
  },
  {
    "objectID": "chapters/templates/classification.html#classification",
    "href": "chapters/templates/classification.html#classification",
    "title": "Appendix A — Classification of Sentinel-2 imagery",
    "section": "A.3 Classification",
    "text": "A.3 Classification\nIn this chapter, we will classify the satellite data to identify forested areas within the scene. By using supervised machine learning techniques, we can train classifiers to distinguish between forested and non-forested regions based on the training data we provide. We will explore two different classifiers and compare their performance in accurately identifying forest areas.\n\nA.3.1 Regions of Interest\nSince this is a supervised classification, we need to have some training data. Therefore we need to define areas or regions, which we are certain represent the feature which we are classifiying. In this case we are interested in forested areas and regions that are definitly not forested. These regions will be used to train our classifiers.\n\n# Define Polygons\nforest_areas = {\n    0: [Polygon([(16.482772, 47.901753), (16.465133, 47.870124), (16.510142, 47.874382), (16.482772, 47.901753)])],\n    1: [Polygon([(16.594079, 47.938855), (16.581914, 47.894454), (16.620233, 47.910268), (16.594079, 47.938855)])],\n    2: [Polygon([(16.67984, 47.978998), (16.637263, 47.971091), (16.660376, 47.929123), (16.67984, 47.978998)])],\n    3: [Polygon([(16.756477, 48.000286), (16.723024, 47.983256), (16.739446, 47.972916), (16.756477, 48.000286)])],\n    4: [Polygon([(16.80696, 48.135923), (16.780806, 48.125583), (16.798445, 48.115243), (16.80696, 48.135923)])],\n    5: [Polygon([(16.684097, 48.144438), (16.664634, 48.124366), (16.690788, 48.118892), (16.684097, 48.144438)])],\n    6: [Polygon([(16.550894, 48.169984), (16.530822, 48.165118), (16.558801, 48.137139), (16.550894, 48.169984)])],\n    7: [Polygon([(16.588604, 48.402329), (16.556976, 48.401112), (16.580697, 48.382865), (16.588604, 48.402329)])],\n}\n\nnonforest_areas = {\n    0: [Polygon([(16.674974, 48.269126), (16.623882, 48.236281), (16.682272, 48.213168), (16.674974, 48.269126)])],\n    1: [Polygon([(16.375723, 48.228374), (16.357476, 48.188839), (16.399444, 48.185798), (16.375723, 48.228374)])],\n    2: [Polygon([(16.457834, 48.26426), (16.418907, 48.267301), (16.440804, 48.23324), (16.457834, 48.26426)])],\n    3: [Polygon([(16.519266, 48.101861), (16.470607, 48.100645), (16.500411, 48.07145), (16.519266, 48.101861)])],\n    4: [Polygon([(16.453577, 48.051986), (16.412217, 48.067192), (16.425598, 48.012451), (16.453577, 48.051986)])],\n}\n\n\n# Geoppandas Dataframe from Polygons\nforest_df = gpd.GeoDataFrame(\n    {\"geometry\": [poly[0] for poly in forest_areas.values()]}, crs=\"EPSG:4326\"\n)\nnonforest_df = gpd.GeoDataFrame(\n    {\"geometry\": [poly[0] for poly in nonforest_areas.values()]},\n    crs=\"EPSG:4326\",\n)\n\n\n# Plotting Regions of Interest\nfig, ax = plt.subplots()\nrgb_median.plot.imshow(ax=ax, robust=True)\nforest_df.plot(ax=ax, ec=\"C0\", fc=\"none\")\nnonforest_df.plot(ax=ax, ec=\"C1\", fc=\"none\")\nax.set_title(\"Regions of Interest\")\nax.set_aspect(\"equal\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\nA.3.2 Data Preparation\nIn addition to the Regions of Interest we will extract the specific bands from the loaded dataset that we intend to use for the classification, which are the red, green, blue and near-infrared bands, although other bands can also be utilized. Using these bands, we will create both a training and a testing dataset. The training dataset will be used to train the classifier, while the testing dataset will be employed to evaluate its performance.\n\n# Classifiying dataset (only necessary bands)\nbands = [\"red\", \"green\", \"blue\", \"nir\"]\nds_class = dc[bands].where(dc.valid).median(dim=\"time\")\nds_class = ds_class.fillna(0)\n\n\ndef clip_array(ds: xr.Dataset, polygons):\n    clipped = ds.rio.clip(polygons, invert=False, all_touched=False, drop=True)\n    clipped_nan = clipped.where(clipped == ds)\n    return clipped_nan\n\n\n# Dictionaries with Dataarrays, each clipped by a Polygon\ndata_dict_feat = {\n    idx: clip_array(ds_class, polygon) for idx, polygon in forest_areas.items()\n}\ndata_dict_nonfeat = {\n    idx: clip_array(ds_class, polygon)\n    for idx, polygon in nonforest_areas.items()\n}\n\n\n# Reshape the polygon dataarrays to get a tuple (one value per band) of pixel values\nfeat_data = [\n    xarray.to_array().values.reshape(len(bands), -1).T\n    for xarray in data_dict_feat.values()\n]  # replaced median_data_dict_feat with data_dict_feat\nnonfeat_data = [\n    xarray.to_array().values.reshape(len(bands), -1).T\n    for xarray in data_dict_nonfeat.values()\n]  # replaced median_data_dict_feat with data_dict_feat\n\n# The rows of the different polygons are concatenated to a single array for further processing\nfeat_values = np.concatenate(feat_data)\nnonfeat_values = np.concatenate(nonfeat_data)\n\n# Drop Nan Values\nX_feat_data = feat_values[~np.isnan(feat_values).any(axis=1)]\nX_nonfeat_data = nonfeat_values[~np.isnan(nonfeat_values).any(axis=1)]\n\n\n# Creating Output Vector (1 for pixel is features; 0 for pixel is not feature)\ny_feat_data = np.ones(X_feat_data.shape[0])\ny_nonfeat_data = np.zeros(X_nonfeat_data.shape[0])\n\n# Concatenate all Classes for training\nX = np.concatenate([X_feat_data, X_nonfeat_data])\ny = np.concatenate([y_feat_data, y_nonfeat_data])\n\n# Split into Training and Testing Data.\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.5, random_state=42\n)\n\nNow that we have prepared the training and testing data, we will create an image array of the actual scene that we intend to classify. This array will serve as the input for our classification algorithms, allowing us to apply the trained classifiers to the entire scene and identify the forested and non-forested areas accurately.\n\nimage_data = (\n    ds_class[bands]\n    .to_array(dim=\"band\")\n    .transpose(\"latitude\", \"longitude\", \"band\")\n)\n\n# Reshape the image data\nnum_of_pixels = ds_class.sizes[\"longitude\"] * ds_class.sizes[\"latitude\"]\nnum_of_bands = len(bands)\nX_image_data = image_data.values.reshape(num_of_pixels, num_of_bands)\n\n\n\nA.3.3 Classifiying with Naive Bayes\nNow that we have prepared all the needed data, we can begin the actual classification process.\nWe will start with a Naive Bayes classifier. First, we will train the classifier using our training dataset. Once trained, we will apply the classifier to the actual image to identify the forested and non-forested areas.\n\n# Naive Bayes initialization and training\nnb = GaussianNB()\nnb_test = nb.fit(X_train, y_train)\nnb_predict = nb.predict(X_test)\n\n# Prediction on image\nnb_predict_img = nb.predict(X_image_data)\nnb_predict_img = nb_predict_img.reshape(\n    ds_class.sizes[\"latitude\"], ds_class.sizes[\"longitude\"]\n)\n\n# Adding the Naive Bayes Prediction to the dataset\nds_class[\"NB-forest\"] = xr.DataArray(\n    nb_predict_img,\n    dims=[\"latitude\", \"longitude\"],\n    coords={\n        \"longitude\": ds_class[\"longitude\"],\n        \"latitude\": ds_class[\"latitude\"],\n    },\n)\n\nTo evaluate the effectiveness of the classification, we will plot the image predicted by the classifier. Additionally, we will examine the Classification Report and the Confusion Matrix to gain further insights into the classifier’s performance.\n\n# Plot Naive Bayes\nalpha = 1\ncmap_green = colors.ListedColormap([(1, 1, 1, alpha), \"green\"])\n\nplot = ds_class[\"NB-forest\"].plot.imshow(\n    cmap=cmap_green, cbar_kwargs={\"ticks\": [0.25, 0.75]}\n)\ncbar = plot.colorbar\ncbar.set_ticklabels([\"non-forest\", \"forest\"])\nplot.axes.set_title(\"Naive Bayes Classification\")\nplt.show()\n\n# Print the Classification report\nprint(\"NAIVE BAYES: \\n \" + classification_report(y_test, nb_predict))\n\n# Print the confusion matrix\ncon_mat_nb = pd.DataFrame(\n    confusion_matrix(y_test, nb_predict),\n    index=[\"Actual Negative\", \"Actual Positive\"],\n    columns=[\"Predicted Negative\", \"Predicted Positive\"],\n)\ndisplay(con_mat_nb)\n\n\n\n\n\n\n\n\nNAIVE BAYES: \n               precision    recall  f1-score   support\n\n         0.0       0.95      0.82      0.88      6618\n         1.0       0.81      0.95      0.88      5487\n\n    accuracy                           0.88     12105\n   macro avg       0.88      0.88      0.88     12105\nweighted avg       0.89      0.88      0.88     12105\n\n\n\n\n\n\n\n\n\n\nPredicted Negative\nPredicted Positive\n\n\n\n\nActual Negative\n5406\n1212\n\n\nActual Positive\n276\n5211\n\n\n\n\n\n\n\n\n\nA.3.4 Classifiying with Random Forest\nTo ensure our results are robust, we will explore an additional classifier. In this section, we will use the Random Forest classifier. The procedure for using this classifier is the same as before: we will train the classifier using our training dataset and then apply it to the actual image to classify the scene.\n\n# Random Forest initialization and training\nrf = RandomForestClassifier(n_estimators=100)\nrf_test = rf.fit(X_train, y_train)\nrf_predict = rf.predict(X_test)\n\n# Prediction on image\nrf_predict_img = rf.predict(X_image_data)\nrf_predict_img = rf_predict_img.reshape(\n    ds_class.sizes[\"latitude\"], ds_class.sizes[\"longitude\"]\n)\n\n# Adding the Random Forest Prediction to the dataset\nds_class[\"RF-forest\"] = xr.DataArray(\n    rf_predict_img,\n    dims=[\"latitude\", \"longitude\"],\n    coords={\n        \"longitude\": ds_class[\"longitude\"],\n        \"latitude\": ds_class[\"latitude\"],\n    },\n)\n\nplot = ds_class[\"RF-forest\"].plot.imshow(\n    cmap=cmap_green, cbar_kwargs={\"ticks\": [0.25, 0.75]}\n)\ncbar = plot.colorbar\ncbar.set_ticklabels([\"non-forest\", \"forest\"])\nplot.axes.set_title(\"Random Forest Classification\")\nplt.show()\n\n# Print the Classification report\nprint(\"RANDOM FOREST: \\n \" + classification_report(y_test, rf_predict))\n\n# Print the confusion matrix\ncon_mat_rf = pd.DataFrame(\n    confusion_matrix(y_test, rf_predict),\n    index=[\"Actual Negative\", \"Actual Positive\"],\n    columns=[\"Predicted Negative\", \"Predicted Positive\"],\n)\ndisplay(con_mat_rf)\n\n\n\n\n\n\n\n\nRANDOM FOREST: \n               precision    recall  f1-score   support\n\n         0.0       0.96      0.95      0.95      6618\n         1.0       0.94      0.95      0.95      5487\n\n    accuracy                           0.95     12105\n   macro avg       0.95      0.95      0.95     12105\nweighted avg       0.95      0.95      0.95     12105\n\n\n\n\n\n\n\n\n\n\nPredicted Negative\nPredicted Positive\n\n\n\n\nActual Negative\n6294\n324\n\n\nActual Positive\n270\n5217\n\n\n\n\n\n\n\nWe can already see from the classification reports and the confusion matrices that the Random Forest classifier has outperformed the Naive Bayes classifier. This is particularly evident from the lower values in the secondary diagonal, indicating minimal False Positives and False Negatives. It appears that the Naive Bayes classifier is more sensitive to False Positives, resulting in a higher rate of incorrect classifications.\n\n\nA.3.5 Comparison of the Classificators\nTo gain a more in-depth understanding of the classifiers’ performance, we will compare their results. Specifically, we will identify the areas where both classifiers agree and the areas where they disagree. This comparison will provide valuable insights into the strengths and weaknesses of each classifier, allowing us to better assess their effectiveness in identifying forested and non-forested regions.\n\n\nCode\ncmap_trio = colors.ListedColormap(\n    [\"whitesmoke\", \"indianred\", \"goldenrod\", \"darkgreen\"]\n)\n\n\ndouble_clf = ds_class[\"NB-forest\"] + 2 * ds_class[\"RF-forest\"]\n\nfig, ax = plt.subplots()\ncax = ax.imshow(double_clf, cmap=cmap_trio, interpolation=\"none\")\n\n# Add a colorbar with custom tick labels\ncbar = fig.colorbar(cax, ticks=[1 * 0.375, 3 * 0.375, 5 * 0.375, 7 * 0.375])\ncbar.ax.set_yticklabels([\"None\", \"Naive Bayes\", \"Random Forest\", \"Both\"])\nax.set_title(\"Classification Comparisson\")\nax.set_axis_off()\nplt.show()\n\n\n\n\n\n\n\n\n\nThe areas where both classifiers agree include the larger forested regions, such as the Nationalpark Donau-Auen and the Leithagebirge. Additionally, both classifiers accurately identified the urban areas of Vienna and correctly excluded them from being classified as forested.\n\n\nCode\n# Plot only one class, either None (0), Naive Bayes (1), Random Forest (2), or Both (3)\nfig, axs = plt.subplots(2, 2, figsize=(8, 8))\nax = axs.ravel()\n\nfor i in range(4):\n    ax[i].imshow(double_clf == i, cmap=\"cmc.oleron_r\", interpolation=\"none\")\n    category = [\n        \"by None\",\n        \"only by Naive Bayes\",\n        \"only by Random Forest\",\n        \"by Both\",\n    ][i]\n    title = \"Areas classified \" + category\n    ax[i].set_title(title)\n    ax[i].set_axis_off()\n\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\nWhen plotting the classified areas individually, we observe that the Random Forest classifier mistakenly identified the Danube River as a forested area. Conversely, the Naive Bayes classifier erroneously classified a significant amount of cropland as forest.\nFinally, by analyzing the proportion of forested areas within the scene, we find that approximately 18% of the area is classified as forest, while around 66% is classified as non-forest. The remaining areas, which include water bodies and cropland, fall into less clearly defined categories.\nThe accompanying bar chart illustrates the distribution of these classifications, highlighting the percentage of forested areas, non-forested areas, and regions classified by only one of the two classifiers. This visual representation helps to quantify the areas of agreement and disagreement between the classifiers, providing a clearer picture of their performance.\n\n\nCode\ncounts = {}\nfor num in range(0, 4):\n    num_2_class = {0: \"None\", 1: \"Naive Bayes\", 2: \"Random Forest\", 3: \"Both\"}\n    counts[num_2_class[num]] = int((double_clf == num).sum().values)\n\nclass_counts_df = pd.DataFrame(\n    list(counts.items()), columns=[\"Class\", \"Count\"]\n)\nclass_counts_df[\"Percentage\"] = (\n    class_counts_df[\"Count\"] / class_counts_df[\"Count\"].sum()\n) * 100\nax = class_counts_df.plot.bar(\n    x=\"Class\",\n    y=\"Percentage\",\n    rot=0,\n    color=\"darkgreen\",\n    ylim=(0, 100),\n    title=\"Classified Areas per Classificator (%)\",\n)\n\n# Annotate the bars with the percentage values\nfor p in ax.patches:\n    ax.annotate(\n        f\"{p.get_height():.1f}%\",\n        (p.get_x() + p.get_width() / 2.0, p.get_height()),\n        ha=\"center\",\n        va=\"center\",\n        xytext=(0, 9),\n        textcoords=\"offset points\",\n    )",
    "crumbs": [
      "Appendices",
      "Templates",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Classification of Sentinel-2 imagery</span>"
    ]
  },
  {
    "objectID": "chapters/templates/classification.html#conclusion",
    "href": "chapters/templates/classification.html#conclusion",
    "title": "Appendix A — Classification of Sentinel-2 imagery",
    "section": "A.4 Conclusion",
    "text": "A.4 Conclusion\nIn this chapter, we utilized machine learning to classify satellite imagery into forested and non-forested areas, comparing Naive Bayes and Random Forest classifiers. The Random Forest classifier generally outperformed Naive Bayes, with fewer errors in classification, although it misclassified the Danube River as forested, while Naive Bayes incorrectly identified cropland as forest. The analysis, supported by the bar chart, revealed that about 18% of the scene was classified as forest, 66% as non-forest, and the remainder included ambiguous categories. This comparison highlights the strengths and limitations of each classifier, underscoring the need for careful selection and evaluation of classification methods.\n\n\n\n\nNASA. 2020. “Earth Observatory.” 2020. https://earthobservatory.nasa.gov/features/MeasuringVegetation/measuring_vegetation_2.php.\n\n\nRouse, John Wilson, Rüdiger H Haas, John A Schell, Donald W Deering, et al. 1974. “Monitoring Vegetation Systems in the Great Plains with ERTS.” NASA Spec. Publ 351 (1): 309.",
    "crumbs": [
      "Appendices",
      "Templates",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Classification of Sentinel-2 imagery</span>"
    ]
  },
  {
    "objectID": "chapters/tutorials/floodmapping.html",
    "href": "chapters/tutorials/floodmapping.html",
    "title": "Appendix B — Reverend Bayes updates our Belief in Flood Detection",
    "section": "",
    "text": "B.1 Greece Flooding 2018\nThis notebook explains how microwave (\\(\\sigma^0\\)) backscattering can be used to map the extent of a flood. We replicate in this exercise the work of (Bauer-Marschallinger et al. 2022) on the TU Wien Bayesian-based flood mapping algorithm.\nIn this exercise we will replicate the case study of the above mentioned paper, the February 2018 flooding of the Greek region of Thessaly.\ntime_range = \"2018-02-28T04:00:00Z/2018-02-28T05:00:00Z\"\nminlon, maxlon = 21.93, 22.23\nminlat, maxlat = 39.47, 39.64\nbounding_box = [minlon, minlat, maxlon, maxlat]",
    "crumbs": [
      "Appendices",
      "Tutorials",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Reverend Bayes updates our Belief in Flood Detection</span>"
    ]
  },
  {
    "objectID": "chapters/tutorials/floodmapping.html#eodc-stac-catalog",
    "href": "chapters/tutorials/floodmapping.html#eodc-stac-catalog",
    "title": "Appendix B — Reverend Bayes updates our Belief in Flood Detection",
    "section": "B.2 EODC STAC Catalog",
    "text": "B.2 EODC STAC Catalog\nThe data required for TU Wien flood mapping algorithm consists of terrain corrected sigma naught backscatter data \\(\\sigma^{0}\\), the projected local incidence angle (PLIA) values of those measurements, and the harmonic parameters (HPAR) of a model fit on the pixel’s backscatter time series. The latter two datasets will needed to calculate the probability density functions over land and water for. We will be getting the required data from the EODC STAC Catalog. Specifically the collections: SENTINEL_SIG0_20M, SENTINEL1_MPLIA and SENTINEL1_HPAR. We use the pystac-client and odc_stac packages to, respectively, discover and fetch the data.\nDue to the way the data is acquired and stored, some items include “no data” areas. In our case, no data has the value -9999, but this can vary from data provider to data provider. This information can usually be found in the metadata. Furthermore, to save memory, data is often stored as integer (e.g. 25) and not in float (e.g. 2.5) format. For this reason, the backscatter values are often multiplied by a scale factor. Hence we define the function post_process_eodc_cube to correct for these factors as obtained from the STAC metadata.\n\nB.2.1 Sigma naught\n\neodc_catalog = pystac_client.Client.open(\"https://stac.eodc.eu/api/v1\")\nsearch = eodc_catalog.search(\n    collections=\"SENTINEL1_SIG0_20M\",\n    bbox=bounding_box,\n    datetime=time_range,\n)\nitems_sig0 = search.item_collection()\n\n\ndef post_process_eodc_cube(dc, items, bands):\n    \"\"\"\n    Postprocessing of EODC data cubes.\n\n    Parameters\n    ----------\n    x : xarray.Dataset\n    items: pystac.item_collection.ItemCollection\n        STAC items that concern the Xarray Dataset\n    bands: array\n        Selected bands\n\n    Returns\n    -------\n    xarray.Dataset\n    \"\"\"\n    if not isinstance(bands, tuple):\n        bands = tuple([bands])\n    for i in bands:\n        dc[i] = post_process_eodc_cube_(dc[i], items, i)\n    return dc\n\n\ndef post_process_eodc_cube_(dc, items, band):\n    scale = items[0].assets[band].extra_fields.get(\"raster:bands\")[0][\"scale\"]\n    nodata = items[0].assets[band].extra_fields.get(\"raster:bands\")[0][\"nodata\"]\n    return dc.where(dc != nodata) / scale\n\n\nbands = \"VV\"\nsig0_dc = odc_stac.load(items_sig0, bands=bands, bbox=bounding_box)\nsig0_dc = (\n    post_process_eodc_cube(sig0_dc, items_sig0, bands)\n    .rename_vars({\"VV\": \"sig0\"})\n    .dropna(dim=\"time\", how=\"all\")\n    .median(\"time\")\n)\n\nsig0_dc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 5MB\nDimensions:      (y: 977, x: 1324)\nCoordinates:\n  * y            (y) float64 8kB 6.388e+05 6.388e+05 ... 6.193e+05 6.193e+05\n  * x            (x) float64 11kB 5.658e+06 5.658e+06 ... 5.684e+06 5.684e+06\n    spatial_ref  int32 4B 27704\nData variables:\n    sig0         (y, x) float32 5MB -9.6 -9.2 -8.3 -8.7 ... -12.3 -11.6 -9.7xarray.DatasetDimensions:y: 977x: 1324Coordinates: (3)y(y)float646.388e+05 6.388e+05 ... 6.193e+05units :metreresolution :-20.0crs :PROJCS[\"Azimuthal_Equidistant\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Azimuthal_Equidistant\"],PARAMETER[\"latitude_of_center\",53],PARAMETER[\"longitude_of_center\",24],PARAMETER[\"false_easting\",5837287.81977],PARAMETER[\"false_northing\",2121415.69617],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]]]array([638790., 638770., 638750., ..., 619310., 619290., 619270.])x(x)float645.658e+06 5.658e+06 ... 5.684e+06units :metreresolution :20.0crs :PROJCS[\"Azimuthal_Equidistant\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Azimuthal_Equidistant\"],PARAMETER[\"latitude_of_center\",53],PARAMETER[\"longitude_of_center\",24],PARAMETER[\"false_easting\",5837287.81977],PARAMETER[\"false_northing\",2121415.69617],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]]]array([5657530., 5657550., 5657570., ..., 5683950., 5683970., 5683990.])spatial_ref()int3227704spatial_ref :PROJCRS[\"Azimuthal_Equidistant\",BASEGEOGCRS[\"WGS 84\",DATUM[\"World Geodetic System 1984\",ELLIPSOID[\"WGS 84\",6378137,298.257223563,LENGTHUNIT[\"metre\",1]]],PRIMEM[\"Greenwich\",0,ANGLEUNIT[\"degree\",0.0174532925199433]],ID[\"EPSG\",4326]],CONVERSION[\"unnamed\",METHOD[\"Azimuthal Equidistant\",ID[\"EPSG\",1125]],PARAMETER[\"Latitude of natural origin\",53,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8801]],PARAMETER[\"Longitude of natural origin\",24,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8802]],PARAMETER[\"False easting\",5837287.81977,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8806]],PARAMETER[\"False northing\",2121415.69617,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8807]]],CS[Cartesian,2],AXIS[\"(E)\",east,ORDER[1],LENGTHUNIT[\"metre\",1,ID[\"EPSG\",9001]]],AXIS[\"(N)\",north,ORDER[2],LENGTHUNIT[\"metre\",1,ID[\"EPSG\",9001]]]]crs_wkt :PROJCRS[\"Azimuthal_Equidistant\",BASEGEOGCRS[\"WGS 84\",DATUM[\"World Geodetic System 1984\",ELLIPSOID[\"WGS 84\",6378137,298.257223563,LENGTHUNIT[\"metre\",1]]],PRIMEM[\"Greenwich\",0,ANGLEUNIT[\"degree\",0.0174532925199433]],ID[\"EPSG\",4326]],CONVERSION[\"unnamed\",METHOD[\"Azimuthal Equidistant\",ID[\"EPSG\",1125]],PARAMETER[\"Latitude of natural origin\",53,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8801]],PARAMETER[\"Longitude of natural origin\",24,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8802]],PARAMETER[\"False easting\",5837287.81977,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8806]],PARAMETER[\"False northing\",2121415.69617,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8807]]],CS[Cartesian,2],AXIS[\"(E)\",east,ORDER[1],LENGTHUNIT[\"metre\",1,ID[\"EPSG\",9001]]],AXIS[\"(N)\",north,ORDER[2],LENGTHUNIT[\"metre\",1,ID[\"EPSG\",9001]]]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :Azimuthal_Equidistantgrid_mapping_name :azimuthal_equidistantlatitude_of_projection_origin :53.0longitude_of_projection_origin :24.0false_easting :5837287.81977false_northing :2121415.69617GeoTransform :5657520 20 0 638800 0 -20array(27704, dtype=int32)Data variables: (1)sig0(y, x)float32-9.6 -9.2 -8.3 ... -12.3 -11.6 -9.7array([[ -9.6,  -9.2,  -8.3, ...,  -9.6, -10. ,  -9.9],\n       [ -9. ,  -8.2,  -7.9, ...,  -9.6,  -9.4,  -9.3],\n       [ -7.6,  -6.9,  -6.9, ..., -11.3, -10.3, -10.1],\n       ...,\n       [ -7.6,  -9.2, -10.3, ..., -11.8, -10.5,  -8.7],\n       [ -8.6,  -7.5,  -7.9, ..., -13.3, -11.5,  -9. ],\n       [ -9.3,  -7.4,  -6.2, ..., -12.3, -11.6,  -9.7]], dtype=float32)Indexes: (2)yPandasIndexPandasIndex(Index([638790.0, 638770.0, 638750.0, 638730.0, 638710.0, 638690.0, 638670.0,\n       638650.0, 638630.0, 638610.0,\n       ...\n       619450.0, 619430.0, 619410.0, 619390.0, 619370.0, 619350.0, 619330.0,\n       619310.0, 619290.0, 619270.0],\n      dtype='float64', name='y', length=977))xPandasIndexPandasIndex(Index([5657530.0, 5657550.0, 5657570.0, 5657590.0, 5657610.0, 5657630.0,\n       5657650.0, 5657670.0, 5657690.0, 5657710.0,\n       ...\n       5683810.0, 5683830.0, 5683850.0, 5683870.0, 5683890.0, 5683910.0,\n       5683930.0, 5683950.0, 5683970.0, 5683990.0],\n      dtype='float64', name='x', length=1324))Attributes: (0)\n\n\n\n\nB.2.2 Harmonic Parameters\n\nsearch = eodc_catalog.search(\n    collections=\"SENTINEL1_HPAR\",\n    bbox=bounding_box,\n    query=[\"sat:relative_orbit=80\"],\n)\n\nitems_hpar = search.item_collection()\nbands = (\"C1\", \"C2\", \"C3\", \"M0\", \"S1\", \"S2\", \"S3\", \"STD\")\nhpar_dc = odc_stac.load(\n    items_hpar,\n    bands=bands,\n    bbox=bounding_box,\n    groupby=None,\n)\nhpar_dc = post_process_eodc_cube(hpar_dc, items_hpar, bands).median(\"time\")\nhpar_dc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 41MB\nDimensions:      (y: 977, x: 1324)\nCoordinates:\n  * y            (y) float64 8kB 6.388e+05 6.388e+05 ... 6.193e+05 6.193e+05\n  * x            (x) float64 11kB 5.658e+06 5.658e+06 ... 5.684e+06 5.684e+06\n    spatial_ref  int32 4B 27704\nData variables:\n    C1           (y, x) float32 5MB -0.1 -0.1 0.0 0.1 0.3 ... 1.2 1.6 1.8 1.4\n    C2           (y, x) float32 5MB -0.1 -0.2 -0.2 0.0 -0.1 ... 0.2 0.2 0.6 0.6\n    C3           (y, x) float32 5MB 0.2 0.1 0.0 0.0 0.1 ... -0.4 -0.6 -0.5 -0.6\n    M0           (y, x) float32 5MB -9.0 -9.7 -10.0 -9.7 ... -11.8 -11.3 -11.5\n    S1           (y, x) float32 5MB -0.3 -0.2 -0.2 -0.1 ... -0.3 -0.2 -0.7 -1.1\n    S2           (y, x) float32 5MB -0.2 0.0 0.0 -0.2 ... -0.2 -0.3 -0.4 -0.2\n    S3           (y, x) float32 5MB -0.1 0.0 0.0 -0.1 -0.1 ... 0.0 0.1 0.1 0.4\n    STD          (y, x) float32 5MB 1.3 1.2 1.1 1.0 1.2 ... 1.9 1.9 1.8 1.8 1.9xarray.DatasetDimensions:y: 977x: 1324Coordinates: (3)y(y)float646.388e+05 6.388e+05 ... 6.193e+05units :metreresolution :-20.0crs :PROJCS[\"Azimuthal_Equidistant\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Azimuthal_Equidistant\"],PARAMETER[\"latitude_of_center\",53],PARAMETER[\"longitude_of_center\",24],PARAMETER[\"false_easting\",5837287.81977],PARAMETER[\"false_northing\",2121415.69617],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]]]array([638790., 638770., 638750., ..., 619310., 619290., 619270.])x(x)float645.658e+06 5.658e+06 ... 5.684e+06units :metreresolution :20.0crs :PROJCS[\"Azimuthal_Equidistant\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Azimuthal_Equidistant\"],PARAMETER[\"latitude_of_center\",53],PARAMETER[\"longitude_of_center\",24],PARAMETER[\"false_easting\",5837287.81977],PARAMETER[\"false_northing\",2121415.69617],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]]]array([5657530., 5657550., 5657570., ..., 5683950., 5683970., 5683990.])spatial_ref()int3227704spatial_ref :PROJCRS[\"Azimuthal_Equidistant\",BASEGEOGCRS[\"WGS 84\",DATUM[\"World Geodetic System 1984\",ELLIPSOID[\"WGS 84\",6378137,298.257223563,LENGTHUNIT[\"metre\",1]]],PRIMEM[\"Greenwich\",0,ANGLEUNIT[\"degree\",0.0174532925199433]],ID[\"EPSG\",4326]],CONVERSION[\"unnamed\",METHOD[\"Azimuthal Equidistant\",ID[\"EPSG\",1125]],PARAMETER[\"Latitude of natural origin\",53,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8801]],PARAMETER[\"Longitude of natural origin\",24,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8802]],PARAMETER[\"False easting\",5837287.81977,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8806]],PARAMETER[\"False northing\",2121415.69617,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8807]]],CS[Cartesian,2],AXIS[\"(E)\",east,ORDER[1],LENGTHUNIT[\"metre\",1,ID[\"EPSG\",9001]]],AXIS[\"(N)\",north,ORDER[2],LENGTHUNIT[\"metre\",1,ID[\"EPSG\",9001]]]]crs_wkt :PROJCRS[\"Azimuthal_Equidistant\",BASEGEOGCRS[\"WGS 84\",DATUM[\"World Geodetic System 1984\",ELLIPSOID[\"WGS 84\",6378137,298.257223563,LENGTHUNIT[\"metre\",1]]],PRIMEM[\"Greenwich\",0,ANGLEUNIT[\"degree\",0.0174532925199433]],ID[\"EPSG\",4326]],CONVERSION[\"unnamed\",METHOD[\"Azimuthal Equidistant\",ID[\"EPSG\",1125]],PARAMETER[\"Latitude of natural origin\",53,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8801]],PARAMETER[\"Longitude of natural origin\",24,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8802]],PARAMETER[\"False easting\",5837287.81977,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8806]],PARAMETER[\"False northing\",2121415.69617,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8807]]],CS[Cartesian,2],AXIS[\"(E)\",east,ORDER[1],LENGTHUNIT[\"metre\",1,ID[\"EPSG\",9001]]],AXIS[\"(N)\",north,ORDER[2],LENGTHUNIT[\"metre\",1,ID[\"EPSG\",9001]]]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :Azimuthal_Equidistantgrid_mapping_name :azimuthal_equidistantlatitude_of_projection_origin :53.0longitude_of_projection_origin :24.0false_easting :5837287.81977false_northing :2121415.69617GeoTransform :5657520 20 0 638800 0 -20array(27704, dtype=int32)Data variables: (8)C1(y, x)float32-0.1 -0.1 0.0 0.1 ... 1.6 1.8 1.4array([[-0.1, -0.1,  0. , ..., -0.4, -0.2, -0.5],\n       [ 0.1,  0.2,  0.3, ..., -0.5, -0.2, -0.5],\n       [ 0.6,  0.7,  0.7, ..., -0.6, -0.5, -0.5],\n       ...,\n       [ 0.6,  1.1,  1.2, ...,  1.2,  1.3,  1.3],\n       [ 1. ,  1.2,  1.4, ...,  1.1,  1.4,  1.4],\n       [ 1.4,  1.6,  1.8, ...,  1.6,  1.8,  1.4]], dtype=float32)C2(y, x)float32-0.1 -0.2 -0.2 0.0 ... 0.2 0.6 0.6array([[-0.1, -0.2, -0.2, ..., -0.1, -0.2, -0.2],\n       [ 0. , -0.1,  0. , ..., -0.1, -0.2, -0.2],\n       [ 0.3,  0.3,  0.2, ...,  0. ,  0. , -0.1],\n       ...,\n       [ 0.4,  0.5,  0.5, ...,  0.6,  0.6,  0.6],\n       [ 0.5,  0.5,  0.6, ...,  0.3,  0.5,  0.6],\n       [ 0.5,  0.3,  0.4, ...,  0.2,  0.6,  0.6]], dtype=float32)C3(y, x)float320.2 0.1 0.0 0.0 ... -0.6 -0.5 -0.6array([[ 0.2,  0.1,  0. , ...,  0.2,  0.3,  0.3],\n       [ 0. ,  0. ,  0. , ...,  0.1,  0.2,  0.2],\n       [-0.2,  0. ,  0.1, ...,  0.1,  0. ,  0. ],\n       ...,\n       [-0.2, -0.3, -0.2, ..., -0.4, -0.3, -0.1],\n       [-0.3, -0.4, -0.3, ..., -0.3, -0.3, -0.2],\n       [-0.4, -0.5, -0.4, ..., -0.6, -0.5, -0.6]], dtype=float32)M0(y, x)float32-9.0 -9.7 -10.0 ... -11.3 -11.5array([[ -9. ,  -9.7, -10. , ...,  -8.9,  -9. ,  -8.9],\n       [ -8.6,  -9.4,  -9.9, ...,  -9. ,  -9.2,  -9.6],\n       [ -7.8,  -7.7,  -8.4, ..., -10.7, -10.1, -10.6],\n       ...,\n       [ -9. ,  -9.5,  -9.7, ..., -12.5, -12.4, -12.1],\n       [ -9.6,  -9.7,  -9.6, ..., -12.2, -11.9, -11.9],\n       [ -9.5,  -9.5,  -9.5, ..., -11.8, -11.3, -11.5]], dtype=float32)S1(y, x)float32-0.3 -0.2 -0.2 ... -0.2 -0.7 -1.1array([[-0.3, -0.2, -0.2, ...,  0. ,  0. , -0.4],\n       [-0.2, -0.3, -0.4, ...,  0. ,  0. , -0.3],\n       [ 0.1, -0.2, -0.3, ...,  0. , -0.1, -0.1],\n       ...,\n       [-1.4, -1.5, -1.1, ..., -0.6, -0.4, -0.6],\n       [-1.7, -1.9, -1.7, ..., -0.1, -0.4, -0.8],\n       [-1.6, -1.7, -1.7, ..., -0.2, -0.7, -1.1]], dtype=float32)S2(y, x)float32-0.2 0.0 0.0 ... -0.3 -0.4 -0.2array([[-0.2,  0. ,  0. , ...,  0.4,  0.3,  0.1],\n       [-0.1,  0. ,  0. , ...,  0.5,  0.3,  0.1],\n       [-0.1,  0. ,  0. , ...,  0.5,  0.6,  0.2],\n       ...,\n       [ 0.7,  0.5,  0.3, ..., -0.6, -0.5, -0.3],\n       [ 0.2,  0.4,  0.3, ..., -0.2, -0.5, -0.4],\n       [ 0. ,  0.2,  0.4, ..., -0.3, -0.4, -0.2]], dtype=float32)S3(y, x)float32-0.1 0.0 0.0 -0.1 ... 0.1 0.1 0.4array([[-0.1,  0. ,  0. , ..., -0.1, -0.1,  0. ],\n       [-0.2, -0.1,  0. , ..., -0.1,  0. ,  0. ],\n       [ 0. ,  0. ,  0. , ...,  0.1,  0. ,  0. ],\n       ...,\n       [-0.8, -0.7, -0.5, ...,  0. ,  0. ,  0. ],\n       [-0.4, -0.4, -0.4, ...,  0.2,  0.1,  0.3],\n       [-0.3, -0.4, -0.3, ...,  0.1,  0.1,  0.4]], dtype=float32)STD(y, x)float321.3 1.2 1.1 1.0 ... 1.9 1.8 1.8 1.9array([[1.3, 1.2, 1.1, ..., 1.2, 1. , 1.1],\n       [1.3, 1.2, 1.2, ..., 0.9, 0.9, 1. ],\n       [1.3, 1.3, 1.2, ..., 0.9, 0.9, 1. ],\n       ...,\n       [2.2, 2.2, 1.7, ..., 1.9, 1.8, 1.8],\n       [2.5, 2.4, 2.1, ..., 1.8, 1.8, 1.9],\n       [2.5, 2.5, 2.3, ..., 1.8, 1.8, 1.9]], dtype=float32)Indexes: (2)yPandasIndexPandasIndex(Index([638790.0, 638770.0, 638750.0, 638730.0, 638710.0, 638690.0, 638670.0,\n       638650.0, 638630.0, 638610.0,\n       ...\n       619450.0, 619430.0, 619410.0, 619390.0, 619370.0, 619350.0, 619330.0,\n       619310.0, 619290.0, 619270.0],\n      dtype='float64', name='y', length=977))xPandasIndexPandasIndex(Index([5657530.0, 5657550.0, 5657570.0, 5657590.0, 5657610.0, 5657630.0,\n       5657650.0, 5657670.0, 5657690.0, 5657710.0,\n       ...\n       5683810.0, 5683830.0, 5683850.0, 5683870.0, 5683890.0, 5683910.0,\n       5683930.0, 5683950.0, 5683970.0, 5683990.0],\n      dtype='float64', name='x', length=1324))Attributes: (0)\n\n\n\n\nB.2.3 Projected Local Incidence Angles\n\nsearch = eodc_catalog.search(\n    collections=\"SENTINEL1_MPLIA\",\n    bbox=bounding_box,\n    query=[\"sat:relative_orbit=80\"],\n)\n\nitems_plia = search.item_collection()\n\nbands = \"MPLIA\"\nplia_dc = odc_stac.load(\n    items_plia,\n    bands=bands,\n    bbox=bounding_box,\n)\n\nplia_dc = post_process_eodc_cube(plia_dc, items_plia, bands).median(\"time\")\nplia_dc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 5MB\nDimensions:      (y: 977, x: 1324)\nCoordinates:\n  * y            (y) float64 8kB 6.388e+05 6.388e+05 ... 6.193e+05 6.193e+05\n  * x            (x) float64 11kB 5.658e+06 5.658e+06 ... 5.684e+06 5.684e+06\n    spatial_ref  int32 4B 27704\nData variables:\n    MPLIA        (y, x) float32 5MB 27.32 29.22 32.16 ... 33.79 34.02 34.27xarray.DatasetDimensions:y: 977x: 1324Coordinates: (3)y(y)float646.388e+05 6.388e+05 ... 6.193e+05units :metreresolution :-20.0crs :PROJCS[\"Azimuthal_Equidistant\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Azimuthal_Equidistant\"],PARAMETER[\"latitude_of_center\",53],PARAMETER[\"longitude_of_center\",24],PARAMETER[\"false_easting\",5837287.81977],PARAMETER[\"false_northing\",2121415.69617],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]]]array([638790., 638770., 638750., ..., 619310., 619290., 619270.])x(x)float645.658e+06 5.658e+06 ... 5.684e+06units :metreresolution :20.0crs :PROJCS[\"Azimuthal_Equidistant\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Azimuthal_Equidistant\"],PARAMETER[\"latitude_of_center\",53],PARAMETER[\"longitude_of_center\",24],PARAMETER[\"false_easting\",5837287.81977],PARAMETER[\"false_northing\",2121415.69617],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]]]array([5657530., 5657550., 5657570., ..., 5683950., 5683970., 5683990.])spatial_ref()int3227704spatial_ref :PROJCRS[\"Azimuthal_Equidistant\",BASEGEOGCRS[\"WGS 84\",DATUM[\"World Geodetic System 1984\",ELLIPSOID[\"WGS 84\",6378137,298.257223563,LENGTHUNIT[\"metre\",1]]],PRIMEM[\"Greenwich\",0,ANGLEUNIT[\"degree\",0.0174532925199433]],ID[\"EPSG\",4326]],CONVERSION[\"unnamed\",METHOD[\"Azimuthal Equidistant\",ID[\"EPSG\",1125]],PARAMETER[\"Latitude of natural origin\",53,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8801]],PARAMETER[\"Longitude of natural origin\",24,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8802]],PARAMETER[\"False easting\",5837287.81977,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8806]],PARAMETER[\"False northing\",2121415.69617,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8807]]],CS[Cartesian,2],AXIS[\"(E)\",east,ORDER[1],LENGTHUNIT[\"metre\",1,ID[\"EPSG\",9001]]],AXIS[\"(N)\",north,ORDER[2],LENGTHUNIT[\"metre\",1,ID[\"EPSG\",9001]]]]crs_wkt :PROJCRS[\"Azimuthal_Equidistant\",BASEGEOGCRS[\"WGS 84\",DATUM[\"World Geodetic System 1984\",ELLIPSOID[\"WGS 84\",6378137,298.257223563,LENGTHUNIT[\"metre\",1]]],PRIMEM[\"Greenwich\",0,ANGLEUNIT[\"degree\",0.0174532925199433]],ID[\"EPSG\",4326]],CONVERSION[\"unnamed\",METHOD[\"Azimuthal Equidistant\",ID[\"EPSG\",1125]],PARAMETER[\"Latitude of natural origin\",53,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8801]],PARAMETER[\"Longitude of natural origin\",24,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8802]],PARAMETER[\"False easting\",5837287.81977,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8806]],PARAMETER[\"False northing\",2121415.69617,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8807]]],CS[Cartesian,2],AXIS[\"(E)\",east,ORDER[1],LENGTHUNIT[\"metre\",1,ID[\"EPSG\",9001]]],AXIS[\"(N)\",north,ORDER[2],LENGTHUNIT[\"metre\",1,ID[\"EPSG\",9001]]]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :Azimuthal_Equidistantgrid_mapping_name :azimuthal_equidistantlatitude_of_projection_origin :53.0longitude_of_projection_origin :24.0false_easting :5837287.81977false_northing :2121415.69617GeoTransform :5657520 20 0 638800 0 -20array(27704, dtype=int32)Data variables: (1)MPLIA(y, x)float3227.32 29.22 32.16 ... 34.02 34.27array([[27.32, 29.22, 32.16, ..., 38.68, 37.31, 36.56],\n       [21.78, 24.62, 29.13, ..., 39.57, 38.85, 38.75],\n       [17.  , 20.55, 26.17, ..., 40.32, 40.23, 40.57],\n       ...,\n       [35.4 , 35.38, 35.39, ..., 33.86, 34.16, 34.63],\n       [35.41, 35.41, 35.41, ..., 33.77, 34.17, 34.65],\n       [35.41, 35.41, 35.41, ..., 33.79, 34.02, 34.27]], dtype=float32)Indexes: (2)yPandasIndexPandasIndex(Index([638790.0, 638770.0, 638750.0, 638730.0, 638710.0, 638690.0, 638670.0,\n       638650.0, 638630.0, 638610.0,\n       ...\n       619450.0, 619430.0, 619410.0, 619390.0, 619370.0, 619350.0, 619330.0,\n       619310.0, 619290.0, 619270.0],\n      dtype='float64', name='y', length=977))xPandasIndexPandasIndex(Index([5657530.0, 5657550.0, 5657570.0, 5657590.0, 5657610.0, 5657630.0,\n       5657650.0, 5657670.0, 5657690.0, 5657710.0,\n       ...\n       5683810.0, 5683830.0, 5683850.0, 5683870.0, 5683890.0, 5683910.0,\n       5683930.0, 5683950.0, 5683970.0, 5683990.0],\n      dtype='float64', name='x', length=1324))Attributes: (0)\n\n\nFinally, we merged the datasets as one big dataset and reproject the data in EPSG 4326 for easier visualizing of the data.\n\nflood_dc = xr.merge([sig0_dc, plia_dc, hpar_dc])\nflood_dc = flood_dc.rio.reproject(\"EPSG:4326\").rio.write_crs(\"EPSG:4326\")\nflood_dc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 49MB\nDimensions:      (x: 1443, y: 846)\nCoordinates:\n  * x            (x) float64 12kB 21.92 21.92 21.92 21.93 ... 22.23 22.23 22.23\n  * y            (y) float64 7kB 39.65 39.65 39.65 39.65 ... 39.46 39.46 39.46\n    spatial_ref  int64 8B 0\nData variables:\n    sig0         (y, x) float32 5MB nan nan nan nan nan ... nan nan nan nan nan\n    MPLIA        (y, x) float32 5MB nan nan nan nan nan ... nan nan nan nan nan\n    C1           (y, x) float32 5MB nan nan nan nan nan ... nan nan nan nan nan\n    C2           (y, x) float32 5MB nan nan nan nan nan ... nan nan nan nan nan\n    C3           (y, x) float32 5MB nan nan nan nan nan ... nan nan nan nan nan\n    M0           (y, x) float32 5MB nan nan nan nan nan ... nan nan nan nan nan\n    S1           (y, x) float32 5MB nan nan nan nan nan ... nan nan nan nan nan\n    S2           (y, x) float32 5MB nan nan nan nan nan ... nan nan nan nan nan\n    S3           (y, x) float32 5MB nan nan nan nan nan ... nan nan nan nan nan\n    STD          (y, x) float32 5MB nan nan nan nan nan ... nan nan nan nan nanxarray.DatasetDimensions:x: 1443y: 846Coordinates: (3)x(x)float6421.92 21.92 21.92 ... 22.23 22.23axis :Xlong_name :longitudestandard_name :longitudeunits :degrees_eastarray([21.924527, 21.924742, 21.924957, ..., 22.234298, 22.234513, 22.234728])y(y)float6439.65 39.65 39.65 ... 39.46 39.46axis :Ylong_name :latitudestandard_name :latitudeunits :degrees_northarray([39.645899, 39.645684, 39.645469, ..., 39.464554, 39.464339, 39.464124])spatial_ref()int640crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]GeoTransform :21.92441968968017 0.0002151185728747185 0.0 39.64600661223929 0.0 -0.0002151185728747185array(0)Data variables: (10)sig0(y, x)float32nan nan nan nan ... nan nan nan nan_FillValue :nanarray([[nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       ...,\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan]], dtype=float32)MPLIA(y, x)float32nan nan nan nan ... nan nan nan nan_FillValue :nanarray([[nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       ...,\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan]], dtype=float32)C1(y, x)float32nan nan nan nan ... nan nan nan nan_FillValue :nanarray([[nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       ...,\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan]], dtype=float32)C2(y, x)float32nan nan nan nan ... nan nan nan nan_FillValue :nanarray([[nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       ...,\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan]], dtype=float32)C3(y, x)float32nan nan nan nan ... nan nan nan nan_FillValue :nanarray([[nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       ...,\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan]], dtype=float32)M0(y, x)float32nan nan nan nan ... nan nan nan nan_FillValue :nanarray([[nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       ...,\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan]], dtype=float32)S1(y, x)float32nan nan nan nan ... nan nan nan nan_FillValue :nanarray([[nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       ...,\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan]], dtype=float32)S2(y, x)float32nan nan nan nan ... nan nan nan nan_FillValue :nanarray([[nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       ...,\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan]], dtype=float32)S3(y, x)float32nan nan nan nan ... nan nan nan nan_FillValue :nanarray([[nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       ...,\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan]], dtype=float32)STD(y, x)float32nan nan nan nan ... nan nan nan nan_FillValue :nanarray([[nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       ...,\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan]], dtype=float32)Indexes: (2)xPandasIndexPandasIndex(Index([ 21.92452724896661, 21.924742367539483,  21.92495748611236,\n       21.925172604685233,  21.92538772325811, 21.925602841830983,\n       21.925817960403858, 21.926033078976733, 21.926248197549608,\n        21.92646331612248,\n       ...\n        22.23279216389608, 22.233007282468954,  22.23322240104183,\n       22.233437519614704,  22.23365263818758, 22.233867756760453,\n        22.23408287533333, 22.234297993906203,  22.23451311247908,\n       22.234728231051953],\n      dtype='float64', name='x', length=1443))yPandasIndexPandasIndex(Index([39.645899052952856,  39.64568393437998,  39.64546881580711,\n        39.64525369723423,  39.64503857866136,  39.64482346008848,\n        39.64460834151561,  39.64439322294273,  39.64417810436986,\n        39.64396298579698,\n       ...\n       39.466059926029594,  39.46584480745672, 39.465629688883844,\n        39.46541457031097, 39.465199451738094,  39.46498433316522,\n       39.464769214592344,  39.46455409601947, 39.464338977446594,\n        39.46412385887372],\n      dtype='float64', name='y', length=846))Attributes: (0)",
    "crumbs": [
      "Appendices",
      "Tutorials",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Reverend Bayes updates our Belief in Flood Detection</span>"
    ]
  },
  {
    "objectID": "chapters/tutorials/floodmapping.html#from-backscattering-to-flood-mapping",
    "href": "chapters/tutorials/floodmapping.html#from-backscattering-to-flood-mapping",
    "title": "Appendix B — Reverend Bayes updates our Belief in Flood Detection",
    "section": "B.3 From Backscattering to Flood Mapping",
    "text": "B.3 From Backscattering to Flood Mapping\nIn the following lines we create a map with microwave backscattering values.\n\nmrs_view = flood_dc.sig0.hvplot.image(\n    x=\"x\", y=\"y\", cmap=\"viridis\", geo=True, tiles=True\n).opts(frame_height=400)\nmrs_view\n\n\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n  \n\n\n\n\n(b) Area targeted for \\(\\sigma^0\\) backscattering is the Greek region of Thessaly, which experienced a major flood in February of 2018.\n\n\n\n\n\nFigure B.1",
    "crumbs": [
      "Appendices",
      "Tutorials",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Reverend Bayes updates our Belief in Flood Detection</span>"
    ]
  },
  {
    "objectID": "chapters/tutorials/floodmapping.html#microwave-backscattering-over-land-and-water",
    "href": "chapters/tutorials/floodmapping.html#microwave-backscattering-over-land-and-water",
    "title": "Appendix B — Reverend Bayes updates our Belief in Flood Detection",
    "section": "B.4 Microwave Backscattering over Land and Water",
    "text": "B.4 Microwave Backscattering over Land and Water\nReverend Bayes was concerned with two events, one (the hypothesis) occurring before the other (the evidence). If we know its cause, it is easy to logically deduce the probability of an effect. However, in this case we want to deduce the probability of a cause from an observed effect, also known as “reversed probability”. In the case of flood mapping, we have \\(\\sigma^0\\) backscatter observations over land (the effect) and we want to deduce the probability of flooding (\\(F\\)) and non-flooding (\\(NF\\)).\nIn other words, we want to know the probability of flooding \\(P(F)\\) given a pixel’s \\(\\sigma^0\\):\n\\[P(F|\\sigma^0)\\]\nand the probability of a pixel being not flooded \\(P(NF)\\) given a certain \\(\\sigma^0\\):\n\\[P(NF|\\sigma^0).\\]\nBayes showed that these can be deduced from the observation that forward and reversed probability are equal, so that:\n\\[P(F|\\sigma^0)P(\\sigma^0) = P(\\sigma^0|F)P(F)\\]\nand\n\\[P(NF|\\sigma^0)P(\\sigma^0) = P(\\sigma^0|NF)P(NF).\\]\nThe forward probability of \\(\\sigma^0\\) given the occurrence of flooding (\\(P(\\sigma^0|F)\\)) and \\(\\sigma^0\\) given no flooding (\\(P(\\sigma^0|NF)\\)) can be extracted from past information on backscattering over land and water surfaces. As seen in the sketch below (Figure B.2), the characteristics of backscattering over land and water differ considerably.\n\n\n\n\n\n\nFigure B.2: Schematic backscattering over land and water. Image from Geological Survey Ireland",
    "crumbs": [
      "Appendices",
      "Tutorials",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Reverend Bayes updates our Belief in Flood Detection</span>"
    ]
  },
  {
    "objectID": "chapters/tutorials/floodmapping.html#likelihoods",
    "href": "chapters/tutorials/floodmapping.html#likelihoods",
    "title": "Appendix B — Reverend Bayes updates our Belief in Flood Detection",
    "section": "B.5 Likelihoods",
    "text": "B.5 Likelihoods\nThe so-called likelihoods of \\(P(\\sigma^0|F)\\) and \\(P(\\sigma^0|NF)\\) can thus be calculated from past backscattering information. In the following code chunk we define the functions calc_water_likelihood and calc_land_likelihood to calculate the water and land likelihood’s of a pixel, based on the Xarray datasets for the PLIA and HPAR, respectively.\n\ndef calc_water_likelihood(sigma, x=None, y=None):\n    \"\"\"\n    Calculate water likelihoods.\n\n    Parameters\n    ----------\n    sigma: float|array\n        Sigma naught value(s)\n    x: float|array\n        Longitude\n    y: float|array\n        Latitude\n\n    Returns\n    -------\n    numpy array\n    \"\"\"\n    point = flood_dc.sel(x=x, y=y, method=\"nearest\")\n    wbsc_mean = point.MPLIA * -0.394181 + -4.142015\n    wbsc_std = 2.754041\n    return norm.pdf(sigma, wbsc_mean.to_numpy(), wbsc_std)\n\n\ndef expected_land_backscatter(data, dtime_str):\n    w = np.pi * 2 / 365\n    dt = datetime.datetime.strptime(dtime_str, \"%Y-%m-%d\")\n    t = dt.timetuple().tm_yday\n    wt = w * t\n\n    M0 = data.M0\n    S1 = data.S1\n    S2 = data.S2\n    S3 = data.S3\n    C1 = data.C1\n    C2 = data.C2\n    C3 = data.C3\n    hm_c1 = (M0 + S1 * np.sin(wt)) + (C1 * np.cos(wt))\n    hm_c2 = (hm_c1 + S2 * np.sin(2 * wt)) + C2 * np.cos(2 * wt)\n    hm_c3 = (hm_c2 + S3 * np.sin(3 * wt)) + C3 * np.cos(3 * wt)\n    return hm_c3\n\n\ndef calc_land_likelihood(sigma, x=None, y=None):\n    \"\"\"\n    Calculate land likelihoods.\n\n    Parameters\n    ----------\n    sigma: float|array\n        Sigma naught value(s)\n    x: float|array\n        Longitude\n    y: float|array\n        Latitude\n\n    Returns\n    -------\n    numpy array\n    \"\"\"\n    point = flood_dc.sel(x=x, y=y, method=\"nearest\")\n    lbsc_mean = expected_land_backscatter(point, \"2018-02-01\")\n    lbsc_std = point.STD\n    return norm.pdf(sigma, lbsc_mean.to_numpy(), lbsc_std.to_numpy())\n\nWithout going into the details of how these likelihoods are calculated, you can hover over a pixel of the map to plot the likelihoods of \\(\\sigma^0\\) being governed by land or water. For reference we model the water and land likelihoods (model_likelihoods) over a range of \\(\\sigma^0\\) values.\n\ndef model_likelihoods(sigma=(-30, 0), x=None, y=None):\n    \"\"\"\n    Model likelihoods over a range of sigma naught.\n\n    Parameters\n    ----------\n    sigma: tuple\n        Minimum and maximum for range of sigma naught values\n    x: float|array\n        Longitude\n    y: float|array\n        Latitude\n\n    Returns\n    -------\n    Pandas Datafrane\n    \"\"\"\n    sigma = np.arange(sigma[0], sigma[1], 0.1)\n    land_likelihood = calc_land_likelihood(sigma=sigma, x=x, y=y)\n    water_likelihood = calc_water_likelihood(sigma=sigma, x=x, y=y)\n    point = flood_dc.sel(x=x, y=y, method=\"nearest\")\n    return pd.DataFrame(\n        {\n            \"sigma\": sigma,\n            \"water_likelihood\": water_likelihood,\n            \"land_likelihood\": land_likelihood,\n            \"observed\": np.repeat(point.sig0.values, len(land_likelihood)),\n        }\n    )\n\n\npointer = hv.streams.PointerXY(source=mrs_view.get(1), x=22.1, y=39.5)\n\nlikelihood_pdi = hvplot.bind(\n    model_likelihoods, x=pointer.param.x, y=pointer.param.y\n).interactive()\n\nview_likelihoods = (\n    likelihood_pdi.hvplot(\"sigma\", \"water_likelihood\", ylabel=\"likelihoods\").dmap()\n    * likelihood_pdi.hvplot(\"sigma\", \"land_likelihood\").dmap()\n    * likelihood_pdi.hvplot(\"observed\", \"land_likelihood\").dmap()\n).opts(frame_height=200, frame_width=300)\n\nview_likelihoods + mrs_view.get(1)\n\n\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n  \n\n\n\n\n(b) Likelihoods for \\(\\sigma^0\\) being associated with land or water for 1 pixel in the Greek area of Thessaly. Likelihoods are calculated over a range of \\(\\sigma^0\\). The pixel’s observed \\(\\sigma^0\\) is given with a vertical line. Hover on the map to re-calculate and update this figure for another pixel in the study area.\n\n\n\n\n\nFigure B.3",
    "crumbs": [
      "Appendices",
      "Tutorials",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Reverend Bayes updates our Belief in Flood Detection</span>"
    ]
  },
  {
    "objectID": "chapters/tutorials/floodmapping.html#posteriors",
    "href": "chapters/tutorials/floodmapping.html#posteriors",
    "title": "Appendix B — Reverend Bayes updates our Belief in Flood Detection",
    "section": "B.6 Posteriors",
    "text": "B.6 Posteriors\nHaving calculated the likelihoods, we can now move on to calculate the probability of (non-)flooding given a pixel’s \\(\\sigma^0\\). These so-called posteriors need one more piece of information, as can be seen in the equation above. We need the probability that a pixel is flooded \\(P(F)\\) or not flooded \\(P(NF)\\). Of course, these are the figures we’ve been trying to find this whole time. We don’t actually have them yet, so what can we do? In Bayesian statistics, we can just start with our best guess. These guesses are called our “priors”, because they are the beliefs we hold prior to looking at the data. This subjective prior belief is the foundation Bayesian statistics, and we use the likelihoods we just calculated to update our belief in this particular hypothesis. This updated belief is called the “posterior”.\nLet’s say that our best estimate for the chance of flooding versus non-flooding of a pixel is 50-50: a coin flip. We now can also calculate the probability of backscattering \\(P(\\sigma^0)\\), as the weighted average of the water and land likelihoods, ensuring that our posteriors range between 0 to 1.\nThe following code block shows how we calculate the priors.\n\ndef calc_posteriors(sigma, x=None, y=None):\n    \"\"\"\n    Calculate posterior probability.\n\n    Parameters\n    ----------\n    sigma: float|array\n        Sigma naught value(s)\n    x: float|array\n        Longitude\n    y: float|array\n        Latitude\n\n    Returns\n    -------\n    Tuple of two Numpy arrays\n    \"\"\"\n    land_likelihood = calc_land_likelihood(sigma=sigma, x=x, y=y)\n    water_likelihood = calc_water_likelihood(sigma=sigma, x=x, y=y)\n    evidence = (water_likelihood * 0.5) + (land_likelihood * 0.5)\n    return (water_likelihood * 0.5) / evidence, (land_likelihood * 0.5) / evidence\n\nWe can plot the posterior probabilities of flooding and non-flooding again and compare these to pixel’s measured \\(\\sigma^0\\). For reference we model the flood and non-flood posteriors (model_posteriors) over a range of \\(\\sigma^0\\) values. Hover on a pixel to calculate the posterior probability.\n\ndef model_posteriors(sigma=(-30, 0), x=None, y=None):\n    \"\"\"\n    Model posterior probabilities over a range of sigma naught.\n\n    Parameters\n    ----------\n    sigma: tuple\n        Minimum and maximum for range of sigma naught values\n    x: float|array\n        Longitude\n    y: float|array\n        Latitude\n\n    Returns\n    -------\n    Pandas Datafrane\n    \"\"\"\n    bays_pd = model_likelihoods(sigma=sigma, x=x, y=y)\n    sigma = np.arange(sigma[0], sigma[1], 0.1)\n    bays_pd[\"f_post_prob\"], bays_pd[\"nf_post_prob\"] = calc_posteriors(\n        sigma=sigma, x=x, y=y\n    )\n    return bays_pd\n\n\nposterior_pdi = hvplot.bind(\n    model_posteriors, x=pointer.param.x, y=pointer.param.y\n).interactive()\n\nview_posteriors = (\n    posterior_pdi.hvplot(\"sigma\", \"f_post_prob\", ylabel=\"posteriors\").dmap()\n    * posterior_pdi.hvplot(\"sigma\", \"nf_post_prob\").dmap()\n    * posterior_pdi.hvplot(\"observed\", \"nf_post_prob\").dmap()\n).opts(frame_height=200, frame_width=300)\n\n(view_likelihoods + view_posteriors).cols(1) + mrs_view.get(1)\n\n\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n  \n\n\n\n\n(b) Posterior probabilities for \\(\\sigma^0\\) of 1 pixel being associated with land for water in the Greek area of Thessaly. Hover on the map to re-calculate and update this figure for another pixel in the study area.\n\n\n\n\n\nFigure B.4",
    "crumbs": [
      "Appendices",
      "Tutorials",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Reverend Bayes updates our Belief in Flood Detection</span>"
    ]
  },
  {
    "objectID": "chapters/tutorials/floodmapping.html#flood-classification",
    "href": "chapters/tutorials/floodmapping.html#flood-classification",
    "title": "Appendix B — Reverend Bayes updates our Belief in Flood Detection",
    "section": "B.7 Flood Classification",
    "text": "B.7 Flood Classification\nWe are now ready to combine all this information and classify the pixels according to the probability of flooding given the backscatter value of each pixel. Here we just look whether the probability of flooding is higher than non-flooding:\n\ndef bayesian_flood_decision(sigma, x=None, y=None):\n    \"\"\"\n    Bayesian decision.\n\n    Parameters\n    ----------\n    sigma: float|array\n        Sigma naught value(s)\n    x: float|array\n        Longitude\n    y: float|array\n        Latitude\n\n    Returns\n    -------\n    Xarray DataArray\n    \"\"\"\n    f_post_prob, nf_post_prob = calc_posteriors(sigma=sigma, x=x, y=y)\n    return xr.where(\n        np.isnan(f_post_prob) | np.isnan(nf_post_prob),\n        np.nan,\n        np.greater(f_post_prob, nf_post_prob),\n    )\n\nHover on a point in the below map to see the likelihoods and posterior distributions (in the left-hand subplots).\n\nflood_dc[\"decision\"] = (\n    (\"y\", \"x\"),\n    bayesian_flood_decision(flood_dc.sig0, flood_dc.x, flood_dc.y),\n)\n\ncolorbar_opts = {\n    \"major_label_overrides\": {\n        0: \"non-flood\",\n        1: \"flood\",\n    },\n    \"ticker\": FixedTicker(ticks=[0, 1]),\n}\nflood_view = flood_dc.decision.hvplot.image(\n    x=\"x\", y=\"y\", rasterize=True, geo=True, cmap=[\"rgba(0, 0, 1, 0.1)\", \"darkred\"]\n).opts(frame_height=400, colorbar_opts={**colorbar_opts})\nmrs_view.get(0) * flood_view\n\n\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n  \n\n\n\n\n(b) Flood extent of the Greek region of Thessaly based on Bayesian probabilities are shown on the map superimposed on an open street map. Hover over a pixel to generate the point’s water and land likelihoods as well as the posterior probabilities.\n\n\n\n\n\nFigure B.5\n\n\n\n\n\n\n\n\nBauer-Marschallinger, Bernhard, Senmao Cao, Mark Edwin Tupas, Florian Roth, Claudio Navacchi, Thomas Melzer, Vahid Freeman, and Wolfgang Wagner. 2022. “Satellite-Based Flood Mapping Through Bayesian Inference from a Sentinel-1 SAR Datacube.” Remote Sensing 14 (15): 3673. https://doi.org/10.3390/rs14153673.",
    "crumbs": [
      "Appendices",
      "Tutorials",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Reverend Bayes updates our Belief in Flood Detection</span>"
    ]
  },
  {
    "objectID": "chapters/references.html",
    "href": "chapters/references.html",
    "title": "References",
    "section": "",
    "text": "Bauer-Marschallinger, Bernhard, Senmao Cao, Mark Edwin Tupas, Florian\nRoth, Claudio Navacchi, Thomas Melzer, Vahid Freeman, and Wolfgang\nWagner. 2022. “Satellite-Based Flood\nMapping Through Bayesian\nInference from a Sentinel-1 SAR\nDatacube.” Remote Sensing 14 (15): 3673. https://doi.org/10.3390/rs14153673.\n\n\nNASA. 2020. “Earth Observatory.” 2020. https://earthobservatory.nasa.gov/features/MeasuringVegetation/measuring_vegetation_2.php.\n\n\nRouse, John Wilson, Rüdiger H Haas, John A Schell, Donald W Deering, et\nal. 1974. “Monitoring Vegetation Systems in the Great Plains with\nERTS.” NASA Spec. Publ 351 (1): 309.",
    "crumbs": [
      "Appendices",
      "References"
    ]
  }
]